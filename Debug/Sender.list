
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006108  08006108  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000068  08006174  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08006174  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa95  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002748  00000000  00000000  0002fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000322b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d73  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019670  00000000  00000000  00034163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014441  00000000  00000000  0004d7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000925c1  00000000  00000000  00061c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e28  00000000  00000000  000f41d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  000f9000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080052f4 	.word	0x080052f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080052f4 	.word	0x080052f4

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fbd0 	bl	8000c0a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fbeb 	bl	8000c4a <SX1278_hw_SPIReadByte>
 8000474:	4603      	mov	r3, r0
 8000476:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fb88 	bl	8000b94 <SX1278_hw_SetNSS>
	return tmp;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	4613      	mov	r3, r2
 800049c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fb75 	bl	8000b94 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f000 fba6 	bl	8000c0a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	78ba      	ldrb	r2, [r7, #2]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb9f 	bl	8000c0a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fb5e 	bl	8000b94 <SX1278_hw_SetNSS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	607a      	str	r2, [r7, #4]
 80004ea:	461a      	mov	r2, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	4613      	mov	r3, r2
 80004f2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d927      	bls.n	800054a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fb47 	bl	8000b94 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7afa      	ldrb	r2, [r7, #11]
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fb7b 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	75fb      	strb	r3, [r7, #23]
 8000518:	e00c      	b.n	8000534 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	7dfb      	ldrb	r3, [r7, #23]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	18d4      	adds	r4, r2, r3
 8000524:	4608      	mov	r0, r1
 8000526:	f000 fb90 	bl	8000c4a <SX1278_hw_SPIReadByte>
 800052a:	4603      	mov	r3, r0
 800052c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800052e:	7dfb      	ldrb	r3, [r7, #23]
 8000530:	3301      	adds	r3, #1
 8000532:	75fb      	strb	r3, [r7, #23]
 8000534:	7dfa      	ldrb	r2, [r7, #23]
 8000536:	7abb      	ldrb	r3, [r7, #10]
 8000538:	429a      	cmp	r2, r3
 800053a:	d3ee      	bcc.n	800051a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fb26 	bl	8000b94 <SX1278_hw_SetNSS>
 8000548:	e000      	b.n	800054c <SX1278_SPIBurstRead+0x6c>
		return;
 800054a:	bf00      	nop
	}
}
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd90      	pop	{r4, r7, pc}

08000552 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	460b      	mov	r3, r1
 8000560:	72fb      	strb	r3, [r7, #11]
 8000562:	4613      	mov	r3, r2
 8000564:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000566:	7abb      	ldrb	r3, [r7, #10]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d929      	bls.n	80005c0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fb0e 	bl	8000b94 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	4610      	mov	r0, r2
 8000588:	f000 fb3f 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]
 8000590:	e00b      	b.n	80005aa <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fb33 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	3301      	adds	r3, #1
 80005a8:	75fb      	strb	r3, [r7, #23]
 80005aa:	7dfa      	ldrb	r2, [r7, #23]
 80005ac:	7abb      	ldrb	r3, [r7, #10]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3ef      	bcc.n	8000592 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 faeb 	bl	8000b94 <SX1278_hw_SetNSS>
 80005be:	e000      	b.n	80005c2 <SX1278_SPIBurstWrite+0x70>
		return;
 80005c0:	bf00      	nop
	}
}
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f90d 	bl	80007f0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 fb5d 	bl	8000c96 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f917 	bl	8000810 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e8:	f04f 0000 	mov.w	r0, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	04d9      	lsls	r1, r3, #19
 80005f2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005f6:	04d0      	lsls	r0, r2, #19
 80005f8:	4a6f      	ldr	r2, [pc, #444]	; (80007b8 <SX1278_config+0x1f0>)
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	f7ff fda7 	bl	8000150 <__aeabi_uldivmod>
 8000602:	4602      	mov	r2, r0
 8000604:	460b      	mov	r3, r1
 8000606:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800060a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	0c02      	lsrs	r2, r0, #16
 8000618:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	b2d3      	uxtb	r3, r2
 8000620:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	0a02      	lsrs	r2, r0, #8
 8000630:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000634:	0a0b      	lsrs	r3, r1, #8
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800063a:	7c3b      	ldrb	r3, [r7, #16]
 800063c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	2303      	movs	r3, #3
 8000644:	2106      	movs	r1, #6
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff83 	bl	8000552 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800064c:	2234      	movs	r2, #52	; 0x34
 800064e:	2139      	movs	r1, #57	; 0x39
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff1c 	bl	800048e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7c1b      	ldrb	r3, [r3, #16]
 800065a:	461a      	mov	r2, r3
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <SX1278_config+0x1f4>)
 800065e:	5c9b      	ldrb	r3, [r3, r2]
 8000660:	461a      	mov	r2, r3
 8000662:	2109      	movs	r1, #9
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff12 	bl	800048e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800066a:	220b      	movs	r2, #11
 800066c:	210b      	movs	r1, #11
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff0d 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000674:	2223      	movs	r2, #35	; 0x23
 8000676:	210c      	movs	r1, #12
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff08 	bl	800048e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7c5b      	ldrb	r3, [r3, #17]
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	; (80007c0 <SX1278_config+0x1f8>)
 8000686:	5c9b      	ldrb	r3, [r3, r2]
 8000688:	2b06      	cmp	r3, #6
 800068a:	d147      	bne.n	800071c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7c9b      	ldrb	r3, [r3, #18]
 8000690:	461a      	mov	r2, r3
 8000692:	4b4c      	ldr	r3, [pc, #304]	; (80007c4 <SX1278_config+0x1fc>)
 8000694:	5c9b      	ldrb	r3, [r3, r2]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7cdb      	ldrb	r3, [r3, #19]
 800069e:	4619      	mov	r1, r3
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <SX1278_config+0x200>)
 80006a2:	5c5b      	ldrb	r3, [r3, r1]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	211d      	movs	r1, #29
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff feea 	bl	800048e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7c5b      	ldrb	r3, [r3, #17]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <SX1278_config+0x1f8>)
 80006c2:	5c9b      	ldrb	r3, [r3, r2]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d1b      	ldrb	r3, [r3, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <SX1278_config+0x204>)
 80006d0:	5c5b      	ldrb	r3, [r3, r1]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006da:	3303      	adds	r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	211e      	movs	r1, #30
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fed3 	bl	800048e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006e8:	2131      	movs	r1, #49	; 0x31
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff feb0 	bl	8000450 <SX1278_SPIRead>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f023 0307 	bic.w	r3, r3, #7
 80006fa:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f043 0305 	orr.w	r3, r3, #5
 8000702:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	461a      	mov	r2, r3
 8000708:	2131      	movs	r1, #49	; 0x31
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff febf 	bl	800048e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000710:	220c      	movs	r2, #12
 8000712:	2137      	movs	r1, #55	; 0x37
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff feba 	bl	800048e <SX1278_SPIWrite>
 800071a:	e029      	b.n	8000770 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7c9b      	ldrb	r3, [r3, #18]
 8000720:	461a      	mov	r2, r3
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SX1278_config+0x1fc>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7cdb      	ldrb	r3, [r3, #19]
 800072e:	4619      	mov	r1, r3
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SX1278_config+0x200>)
 8000732:	5c5b      	ldrb	r3, [r3, r1]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000738:	4413      	add	r3, r2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	211d      	movs	r1, #29
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fea4 	bl	800048e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7c5b      	ldrb	r3, [r3, #17]
 800074a:	461a      	mov	r2, r3
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SX1278_config+0x1f8>)
 800074e:	5c9b      	ldrb	r3, [r3, r2]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7d1b      	ldrb	r3, [r3, #20]
 8000758:	4619      	mov	r1, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <SX1278_config+0x204>)
 800075c:	5c5b      	ldrb	r3, [r3, r1]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000762:	4413      	add	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	211e      	movs	r1, #30
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe8f 	bl	800048e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000770:	2204      	movs	r2, #4
 8000772:	2126      	movs	r1, #38	; 0x26
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe8a 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800077a:	2208      	movs	r2, #8
 800077c:	211f      	movs	r1, #31
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe85 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe80 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800078e:	2208      	movs	r2, #8
 8000790:	2121      	movs	r1, #33	; 0x21
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe7b 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000798:	2201      	movs	r2, #1
 800079a:	2141      	movs	r1, #65	; 0x41
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fe76 	bl	800048e <SX1278_SPIWrite>
	module->readBytes = 0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f810 	bl	80007d0 <SX1278_standby>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	01e84800 	.word	0x01e84800
 80007bc:	08005324 	.word	0x08005324
 80007c0:	08005328 	.word	0x08005328
 80007c4:	08005330 	.word	0x08005330
 80007c8:	0800533c 	.word	0x0800533c
 80007cc:	08005340 	.word	0x08005340

080007d0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d8:	2209      	movs	r2, #9
 80007da:	2101      	movs	r1, #1
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fe56 	bl	800048e <SX1278_SPIWrite>
	module->status = STANDBY;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2201      	movs	r2, #1
 80007e6:	759a      	strb	r2, [r3, #22]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f8:	2208      	movs	r2, #8
 80007fa:	2101      	movs	r1, #1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe46 	bl	800048e <SX1278_SPIWrite>
	module->status = SLEEP;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	759a      	strb	r2, [r3, #22]
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000818:	2288      	movs	r2, #136	; 0x88
 800081a:	2101      	movs	r1, #1
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fe36 	bl	800048e <SX1278_SPIWrite>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	2112      	movs	r1, #18
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe29 	bl	800048e <SX1278_SPIWrite>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	460b      	mov	r3, r1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	7afa      	ldrb	r2, [r7, #11]
 8000856:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff feb5 	bl	80005c8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800085e:	2284      	movs	r2, #132	; 0x84
 8000860:	214d      	movs	r1, #77	; 0x4d
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe13 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	2124      	movs	r1, #36	; 0x24
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe0e 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f7ff fe09 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800087c:	223f      	movs	r2, #63	; 0x3f
 800087e:	2111      	movs	r1, #17
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff fe04 	bl	800048e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff ffcf 	bl	800082a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	461a      	mov	r2, r3
 8000890:	2122      	movs	r1, #34	; 0x22
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdfb 	bl	800048e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000898:	210f      	movs	r1, #15
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdd8 	bl	8000450 <SX1278_SPIRead>
 80008a0:	4603      	mov	r3, r0
 80008a2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	461a      	mov	r2, r3
 80008a8:	210d      	movs	r1, #13
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fdef 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008b0:	228d      	movs	r2, #141	; 0x8d
 80008b2:	2101      	movs	r1, #1
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fdea 	bl	800048e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008c2:	2118      	movs	r1, #24
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fdc3 	bl	8000450 <SX1278_SPIRead>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d104      	bne.n	80008de <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2203      	movs	r2, #3
 80008d8:	759a      	strb	r2, [r3, #22]
			return 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	e013      	b.n	8000906 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d109      	bne.n	80008fe <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f967 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe67 	bl	80005c8 <SX1278_config>
			return 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e003      	b.n	8000906 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f9c9 	bl	8000c96 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000904:	e7dd      	b.n	80008c2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f9c6 	bl	8000cac <SX1278_hw_GetDIO0>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d030      	beq.n	8000988 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3317      	adds	r3, #23
 800092a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f84d 	bl	80049d0 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000936:	2110      	movs	r1, #16
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fd89 	bl	8000450 <SX1278_SPIRead>
 800093e:	4603      	mov	r3, r0
 8000940:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	461a      	mov	r2, r3
 8000946:	210d      	movs	r1, #13
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fda0 	bl	800048e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7c5b      	ldrb	r3, [r3, #17]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e005      	b.n	800096a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800095e:	2113      	movs	r1, #19
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fd75 	bl	8000450 <SX1278_SPIRead>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f103 0217 	add.w	r2, r3, #23
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fdb3 	bl	80004e0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff51 	bl	800082a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	460b      	mov	r3, r1
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	7afa      	ldrb	r2, [r7, #11]
 80009a8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fe0c 	bl	80005c8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009b0:	2287      	movs	r2, #135	; 0x87
 80009b2:	214d      	movs	r1, #77	; 0x4d
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd6a 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009ba:	2200      	movs	r2, #0
 80009bc:	2124      	movs	r1, #36	; 0x24
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff fd65 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009c4:	2241      	movs	r2, #65	; 0x41
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fd60 	bl	800048e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff ff2b 	bl	800082a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009d4:	22f7      	movs	r2, #247	; 0xf7
 80009d6:	2111      	movs	r1, #17
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd58 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	461a      	mov	r2, r3
 80009e2:	2122      	movs	r1, #34	; 0x22
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fd52 	bl	800048e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009ea:	210e      	movs	r1, #14
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fd2f 	bl	8000450 <SX1278_SPIRead>
 80009f2:	4603      	mov	r3, r0
 80009f4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	461a      	mov	r2, r3
 80009fa:	210d      	movs	r1, #13
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd46 	bl	800048e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a02:	2122      	movs	r1, #34	; 0x22
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fd23 	bl	8000450 <SX1278_SPIRead>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a0e:	7dba      	ldrb	r2, [r7, #22]
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d104      	bne.n	8000a20 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2202      	movs	r2, #2
 8000a1a:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e00e      	b.n	8000a3e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1ea      	bne.n	8000a02 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f8c6 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fdc6 	bl	80005c8 <SX1278_config>
			return 0;
 8000a3c:	2300      	movs	r3, #0
		}
	}
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4613      	mov	r3, r2
 8000a54:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fd78 	bl	8000552 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a62:	228b      	movs	r2, #139	; 0x8b
 8000a64:	2101      	movs	r1, #1
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fd11 	bl	800048e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f91b 	bl	8000cac <SX1278_hw_GetDIO0>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a7c:	2112      	movs	r1, #18
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fce6 	bl	8000450 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fed0 	bl	800082a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff fea0 	bl	80007d0 <SX1278_standby>
			return 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e013      	b.n	8000abc <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f88c 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fd8c 	bl	80005c8 <SX1278_config>
			return 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e003      	b.n	8000abc <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 f8ee 	bl	8000c96 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aba:	e7d7      	b.n	8000a6c <SX1278_LoRaTxPacket+0x26>
	}
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f848 	bl	8000b6a <SX1278_hw_init>
	module->frequency = frequency;
 8000ada:	68f9      	ldr	r1, [r7, #12]
 8000adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	7e3a      	ldrb	r2, [r7, #24]
 8000ae8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	7f3a      	ldrb	r2, [r7, #28]
 8000aee:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000af6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000afe:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b06:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b0e:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fd59 	bl	80005c8 <SX1278_config>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d003      	beq.n	8000b40 <SX1278_read+0x22>
		length = module->readBytes;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b3e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3317      	adds	r3, #23
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4619      	mov	r1, r3
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f003 ff75 	bl	8004a38 <memcpy>
	rxBuf[length] = '\0';
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f80d 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6858      	ldr	r0, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	4619      	mov	r1, r3
 8000b88:	f001 fd8b 	bl	80026a2 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6958      	ldr	r0, [r3, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f001 fd74 	bl	80026a2 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffe1 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6858      	ldr	r0, [r3, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	f001 fd5f 	bl	80026a2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 f856 	bl	8000c96 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6858      	ldr	r0, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f001 fd53 	bl	80026a2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	f000 f84a 	bl	8000c96 <SX1278_hw_DelayMs>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ffbb 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6998      	ldr	r0, [r3, #24]
 8000c22:	1cf9      	adds	r1, r7, #3
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f003 f853 	bl	8003cd4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c2e:	bf00      	nop
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fb40 	bl	80042ba <HAL_SPI_GetState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d1f7      	bne.n	8000c30 <SX1278_hw_SPICommand+0x26>
		;
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af02      	add	r7, sp, #8
 8000c50:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff99 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6998      	ldr	r0, [r3, #24]
 8000c66:	f107 020e 	add.w	r2, r7, #14
 8000c6a:	f107 010f 	add.w	r1, r7, #15
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	f003 f970 	bl	8003f5a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c7a:	bf00      	nop
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 fb1a 	bl	80042ba <HAL_SPI_GetState>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d1f7      	bne.n	8000c7c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 f84a 	bl	8001d38 <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	f001 fcd7 	bl	8002674 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	0000      	movs	r0, r0
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <main>:

uint16_t Flame,MQ2;
uint8_t ON;

int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af06      	add	r7, sp, #24
  HAL_Init();
 8000ce6:	f000 ffc5 	bl	8001c74 <HAL_Init>

  SystemClock_Config();
 8000cea:	f000 f95d 	bl	8000fa8 <SystemClock_Config>

  MX_GPIO_Init();
 8000cee:	f000 fab9 	bl	8001264 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cf2:	f000 fa67 	bl	80011c4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000cf6:	f000 fa2f 	bl	8001158 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000cfa:	f000 f9b1 	bl	8001060 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cfe:	f000 f9fd 	bl	80010fc <MX_I2C1_Init>

  HAL_TIM_Base_Start(&htim1);
 8000d02:	4897      	ldr	r0, [pc, #604]	; (8000f60 <main+0x280>)
 8000d04:	f003 fbdc 	bl	80044c0 <HAL_TIM_Base_Start>
  SSD1306_Init();
 8000d08:	f000 fb5a 	bl	80013c0 <SSD1306_Init>

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000d0c:	4b95      	ldr	r3, [pc, #596]	; (8000f64 <main+0x284>)
 8000d0e:	4a96      	ldr	r2, [pc, #600]	; (8000f68 <main+0x288>)
 8000d10:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000d12:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <main+0x284>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000d18:	4b92      	ldr	r3, [pc, #584]	; (8000f64 <main+0x284>)
 8000d1a:	4a94      	ldr	r2, [pc, #592]	; (8000f6c <main+0x28c>)
 8000d1c:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000d1e:	4b91      	ldr	r3, [pc, #580]	; (8000f64 <main+0x284>)
 8000d20:	2210      	movs	r2, #16
 8000d22:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8000d24:	4b8f      	ldr	r3, [pc, #572]	; (8000f64 <main+0x284>)
 8000d26:	4a90      	ldr	r2, [pc, #576]	; (8000f68 <main+0x288>)
 8000d28:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8000d2a:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <main+0x284>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000d30:	4b8c      	ldr	r3, [pc, #560]	; (8000f64 <main+0x284>)
 8000d32:	4a8f      	ldr	r2, [pc, #572]	; (8000f70 <main+0x290>)
 8000d34:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000d36:	4b8f      	ldr	r3, [pc, #572]	; (8000f74 <main+0x294>)
 8000d38:	4a8a      	ldr	r2, [pc, #552]	; (8000f64 <main+0x284>)
 8000d3a:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	9305      	str	r3, [sp, #20]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	2300      	movs	r3, #0
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	2307      	movs	r3, #7
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	a380      	add	r3, pc, #512	; (adr r3, 8000f58 <main+0x278>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	4886      	ldr	r0, [pc, #536]	; (8000f74 <main+0x294>)
 8000d5c:	f7ff feb2 	bl	8000ac4 <SX1278_init>
  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	if (master == 1) {
 8000d60:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <main+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10f      	bne.n	8000d88 <main+0xa8>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000d68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4881      	ldr	r0, [pc, #516]	; (8000f74 <main+0x294>)
 8000d70:	f7ff fe11 	bl	8000996 <SX1278_LoRaEntryTx>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a81      	ldr	r2, [pc, #516]	; (8000f7c <main+0x29c>)
 8000d78:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d80:	487f      	ldr	r0, [pc, #508]	; (8000f80 <main+0x2a0>)
 8000d82:	f001 fc8e 	bl	80026a2 <HAL_GPIO_WritePin>
 8000d86:	e00e      	b.n	8000da6 <main+0xc6>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000d88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4879      	ldr	r0, [pc, #484]	; (8000f74 <main+0x294>)
 8000d90:	f7ff fd58 	bl	8000844 <SX1278_LoRaEntryRx>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a79      	ldr	r2, [pc, #484]	; (8000f7c <main+0x29c>)
 8000d98:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4877      	ldr	r0, [pc, #476]	; (8000f80 <main+0x2a0>)
 8000da2:	f001 fc7e 	bl	80026a2 <HAL_GPIO_WritePin>
	}
  while (1)
  {
	  buffer[0]= (uint8_t)Flame ;
 8000da6:	4b77      	ldr	r3, [pc, #476]	; (8000f84 <main+0x2a4>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b76      	ldr	r3, [pc, #472]	; (8000f88 <main+0x2a8>)
 8000dae:	701a      	strb	r2, [r3, #0]
	  buffer[1]= (uint8_t)(Flame>>8);
 8000db0:	4b74      	ldr	r3, [pc, #464]	; (8000f84 <main+0x2a4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <main+0x2a8>)
 8000dbc:	705a      	strb	r2, [r3, #1]
	  buffer[2]= (uint8_t)ON;
 8000dbe:	4b73      	ldr	r3, [pc, #460]	; (8000f8c <main+0x2ac>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b71      	ldr	r3, [pc, #452]	; (8000f88 <main+0x2a8>)
 8000dc4:	709a      	strb	r2, [r3, #2]
	  buffer[3]= (uint8_t)MQ2;
 8000dc6:	4b72      	ldr	r3, [pc, #456]	; (8000f90 <main+0x2b0>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <main+0x2a8>)
 8000dce:	70da      	strb	r2, [r3, #3]
	  buffer[4]= (uint8_t)(MQ2>>8);
 8000dd0:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <main+0x2b0>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <main+0x2a8>)
 8000ddc:	711a      	strb	r2, [r3, #4]

	  if (master == 1) {
 8000dde:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <main+0x298>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d12f      	bne.n	8000e46 <main+0x166>

		HAL_Delay(1000);
 8000de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dea:	f000 ffa5 	bl	8001d38 <HAL_Delay>

		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000dee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000df2:	2110      	movs	r1, #16
 8000df4:	485f      	ldr	r0, [pc, #380]	; (8000f74 <main+0x294>)
 8000df6:	f7ff fdce 	bl	8000996 <SX1278_LoRaEntryTx>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a5f      	ldr	r2, [pc, #380]	; (8000f7c <main+0x29c>)
 8000dfe:	6013      	str	r3, [r2, #0]

		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,16, 2000);
 8000e00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e04:	2210      	movs	r2, #16
 8000e06:	4960      	ldr	r1, [pc, #384]	; (8000f88 <main+0x2a8>)
 8000e08:	485a      	ldr	r0, [pc, #360]	; (8000f74 <main+0x294>)
 8000e0a:	f7ff fe1c 	bl	8000a46 <SX1278_LoRaTxPacket>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <main+0x29c>)
 8000e12:	6013      	str	r3, [r2, #0]
		if(ret)
 8000e14:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <main+0x29c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0c4      	beq.n	8000da6 <main+0xc6>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e22:	4857      	ldr	r0, [pc, #348]	; (8000f80 <main+0x2a0>)
 8000e24:	f001 fc3d 	bl	80026a2 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2c:	f000 ff84 	bl	8001d38 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e36:	4852      	ldr	r0, [pc, #328]	; (8000f80 <main+0x2a0>)
 8000e38:	f001 fc33 	bl	80026a2 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f000 ff7a 	bl	8001d38 <HAL_Delay>
 8000e44:	e7af      	b.n	8000da6 <main+0xc6>
		}

	  } else {

		HAL_Delay(1000);
 8000e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4a:	f000 ff75 	bl	8001d38 <HAL_Delay>

		ret = SX1278_LoRaRxPacket(&SX1278);
 8000e4e:	4849      	ldr	r0, [pc, #292]	; (8000f74 <main+0x294>)
 8000e50:	f7ff fd5d 	bl	800090e <SX1278_LoRaRxPacket>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b48      	ldr	r3, [pc, #288]	; (8000f7c <main+0x29c>)
 8000e5a:	601a      	str	r2, [r3, #0]

		if (ret > 0) {
 8000e5c:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <main+0x29c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dda0      	ble.n	8000da6 <main+0xc6>

			if(SX1278_read(&SX1278, (uint8_t*) buffer, ret)>0){
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <main+0x29c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4946      	ldr	r1, [pc, #280]	; (8000f88 <main+0x2a8>)
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <main+0x294>)
 8000e70:	f7ff fe55 	bl	8000b1e <SX1278_read>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d095      	beq.n	8000da6 <main+0xc6>

				Flame = ((uint16_t)buffer[1]<<8 | (uint16_t)buffer[0]);
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <main+0x2a8>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <main+0x2a8>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <main+0x2a4>)
 8000e90:	801a      	strh	r2, [r3, #0]
				SSD1306_GotoXY (0,0);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 fbfb 	bl	8001690 <SSD1306_GotoXY>
				sprintf(strCopy,"%d", Flame);
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <main+0x2a4>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	493c      	ldr	r1, [pc, #240]	; (8000f94 <main+0x2b4>)
 8000ea2:	483d      	ldr	r0, [pc, #244]	; (8000f98 <main+0x2b8>)
 8000ea4:	f003 fd74 	bl	8004990 <siprintf>
				SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	493c      	ldr	r1, [pc, #240]	; (8000f9c <main+0x2bc>)
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <main+0x2b8>)
 8000eae:	f000 fc85 	bl	80017bc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000eb2:	f000 fb49 	bl	8001548 <SSD1306_UpdateScreen>

				if(buffer[2]==0){
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <main+0x2a8>)
 8000eb8:	789b      	ldrb	r3, [r3, #2]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11e      	bne.n	8000efc <main+0x21c>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	4829      	ldr	r0, [pc, #164]	; (8000f6c <main+0x28c>)
 8000ec6:	f001 fbec 	bl	80026a2 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f000 ff33 	bl	8001d38 <HAL_Delay>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4824      	ldr	r0, [pc, #144]	; (8000f6c <main+0x28c>)
 8000eda:	f001 fbe2 	bl	80026a2 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 ff2a 	bl	8001d38 <HAL_Delay>
					SSD1306_GotoXY (0,30);
 8000ee4:	211e      	movs	r1, #30
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 fbd2 	bl	8001690 <SSD1306_GotoXY>
					SSD1306_Puts ("Fireeee", &Font_11x18, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	492b      	ldr	r1, [pc, #172]	; (8000f9c <main+0x2bc>)
 8000ef0:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <main+0x2c0>)
 8000ef2:	f000 fc63 	bl	80017bc <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000ef6:	f000 fb27 	bl	8001548 <SSD1306_UpdateScreen>
 8000efa:	e00a      	b.n	8000f12 <main+0x232>
				} else{
					SSD1306_GotoXY (0,30);
 8000efc:	211e      	movs	r1, #30
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fbc6 	bl	8001690 <SSD1306_GotoXY>
					SSD1306_Puts ("FreeFireeee", &Font_11x18, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4925      	ldr	r1, [pc, #148]	; (8000f9c <main+0x2bc>)
 8000f08:	4826      	ldr	r0, [pc, #152]	; (8000fa4 <main+0x2c4>)
 8000f0a:	f000 fc57 	bl	80017bc <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000f0e:	f000 fb1b 	bl	8001548 <SSD1306_UpdateScreen>
				}

				MQ2 = ((uint16_t)buffer[3]<<8 | (uint16_t)buffer[2]);
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <main+0x2a8>)
 8000f14:	78db      	ldrb	r3, [r3, #3]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <main+0x2a8>)
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <main+0x2b0>)
 8000f28:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <main+0x2a0>)
 8000f32:	f001 fbb6 	bl	80026a2 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3a:	f000 fefd 	bl	8001d38 <HAL_Delay>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <main+0x2a0>)
 8000f46:	f001 fbac 	bl	80026a2 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000f4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f4e:	f000 fef3 	bl	8001d38 <HAL_Delay>
	  buffer[0]= (uint8_t)Flame ;
 8000f52:	e728      	b.n	8000da6 <main+0xc6>
 8000f54:	f3af 8000 	nop.w
 8000f58:	19de5080 	.word	0x19de5080
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	20000160 	.word	0x20000160
 8000f64:	200001a8 	.word	0x200001a8
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	20000108 	.word	0x20000108
 8000f74:	200001c8 	.word	0x200001c8
 8000f78:	200002e0 	.word	0x200002e0
 8000f7c:	200002e4 	.word	0x200002e4
 8000f80:	40011000 	.word	0x40011000
 8000f84:	20000308 	.word	0x20000308
 8000f88:	200002e8 	.word	0x200002e8
 8000f8c:	2000030c 	.word	0x2000030c
 8000f90:	2000030a 	.word	0x2000030a
 8000f94:	0800530c 	.word	0x0800530c
 8000f98:	200002f8 	.word	0x200002f8
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	08005310 	.word	0x08005310
 8000fa4:	08005318 	.word	0x08005318

08000fa8 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fd0a 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f932 	bl	8003268 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100a:	f000 f9d3 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fb9e 	bl	800376c <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001036:	f000 f9bd 	bl	80013b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800103a:	2302      	movs	r3, #2
 800103c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800103e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001042:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fd0a 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001052:	f000 f9af 	bl	80013b4 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_ADC1_Init+0x94>)
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_ADC1_Init+0x94>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_ADC1_Init+0x94>)
 8001080:	2201      	movs	r2, #1
 8001082:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_ADC1_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0x94>)
 800108c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_ADC1_Init+0x94>)
 800109a:	2202      	movs	r2, #2
 800109c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_ADC1_Init+0x94>)
 80010a0:	f000 fe6e 	bl	8001d80 <HAL_ADC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010aa:	f000 f983 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_ADC1_Init+0x94>)
 80010c0:	f000 ff36 	bl	8001f30 <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f973 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0x94>)
 80010dc:	f000 ff28 	bl	8001f30 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010e6:	f000 f965 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000084 	.word	0x20000084
 80010f8:	40012400 	.word	0x40012400

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_I2C1_Init+0x50>)
 800113a:	f001 facb 	bl	80026d4 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f936 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000b4 	.word	0x200000b4
 8001150:	40005400 	.word	0x40005400
 8001154:	00061a80 	.word	0x00061a80

08001158 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI1_Init+0x64>)
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <MX_SPI1_Init+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_SPI1_Init+0x64>)
 8001164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI1_Init+0x64>)
 800118c:	2210      	movs	r2, #16
 800118e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI1_Init+0x64>)
 80011a4:	220a      	movs	r2, #10
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_SPI1_Init+0x64>)
 80011aa:	f002 fd0f 	bl	8003bcc <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b4:	f000 f8fe 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000108 	.word	0x20000108
 80011c0:	40013000 	.word	0x40013000

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0x98>)
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_TIM1_Init+0x9c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM1_Init+0x98>)
 80011e8:	2247      	movs	r2, #71	; 0x47
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM1_Init+0x98>)
 80011f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM1_Init+0x98>)
 800120e:	f003 f907 	bl	8004420 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001218:	f000 f8cc 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM1_Init+0x98>)
 800122a:	f003 f993 	bl	8004554 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001234:	f000 f8be 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM1_Init+0x98>)
 8001246:	f003 fb45 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001250:	f000 f8b0 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000160 	.word	0x20000160
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <MX_GPIO_Init+0x140>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <MX_GPIO_Init+0x140>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x140>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4832      	ldr	r0, [pc, #200]	; (80013a8 <MX_GPIO_Init+0x144>)
 80012e0:	f001 f9df 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	4830      	ldr	r0, [pc, #192]	; (80013ac <MX_GPIO_Init+0x148>)
 80012ea:	f001 f9da 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2101      	movs	r1, #1
 80012f2:	482f      	ldr	r0, [pc, #188]	; (80013b0 <MX_GPIO_Init+0x14c>)
 80012f4:	f001 f9d5 	bl	80026a2 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2101      	movs	r1, #1
 80012fc:	482c      	ldr	r0, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x14c>)
 80012fe:	f001 f9d0 	bl	80026a2 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <MX_GPIO_Init+0x148>)
 800130a:	f001 f9ca 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_GPIO_Init+0x144>)
 8001328:	f001 f820 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800132c:	2310      	movs	r3, #16
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2302      	movs	r3, #2
 800133a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4619      	mov	r1, r3
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <MX_GPIO_Init+0x148>)
 8001344:	f001 f812 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0x14c>)
 8001360:	f001 f804 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin Flame_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|Flame_Pin;
 8001364:	230a      	movs	r3, #10
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <MX_GPIO_Init+0x14c>)
 8001378:	f000 fff8 	bl	800236c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1_Pin;
 800137c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2302      	movs	r3, #2
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0x148>)
 8001396:	f000 ffe9 	bl	800236c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013c6:	f000 fa1f 	bl	8001808 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013ce:	2201      	movs	r2, #1
 80013d0:	2178      	movs	r1, #120	; 0x78
 80013d2:	485b      	ldr	r0, [pc, #364]	; (8001540 <SSD1306_Init+0x180>)
 80013d4:	f001 fbc0 	bl	8002b58 <HAL_I2C_IsDeviceReady>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e0a9      	b.n	8001536 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80013e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e8:	e002      	b.n	80013f0 <SSD1306_Init+0x30>
		p--;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f9      	bne.n	80013ea <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80013f6:	22ae      	movs	r2, #174	; 0xae
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	; 0x78
 80013fc:	f000 fa7e 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	2078      	movs	r0, #120	; 0x78
 8001406:	f000 fa79 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800140a:	2210      	movs	r2, #16
 800140c:	2100      	movs	r1, #0
 800140e:	2078      	movs	r0, #120	; 0x78
 8001410:	f000 fa74 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001414:	22b0      	movs	r2, #176	; 0xb0
 8001416:	2100      	movs	r1, #0
 8001418:	2078      	movs	r0, #120	; 0x78
 800141a:	f000 fa6f 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800141e:	22c8      	movs	r2, #200	; 0xc8
 8001420:	2100      	movs	r1, #0
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f000 fa6a 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2078      	movs	r0, #120	; 0x78
 800142e:	f000 fa65 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001432:	2210      	movs	r2, #16
 8001434:	2100      	movs	r1, #0
 8001436:	2078      	movs	r0, #120	; 0x78
 8001438:	f000 fa60 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	2100      	movs	r1, #0
 8001440:	2078      	movs	r0, #120	; 0x78
 8001442:	f000 fa5b 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001446:	2281      	movs	r2, #129	; 0x81
 8001448:	2100      	movs	r1, #0
 800144a:	2078      	movs	r0, #120	; 0x78
 800144c:	f000 fa56 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	2100      	movs	r1, #0
 8001454:	2078      	movs	r0, #120	; 0x78
 8001456:	f000 fa51 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800145a:	22a1      	movs	r2, #161	; 0xa1
 800145c:	2100      	movs	r1, #0
 800145e:	2078      	movs	r0, #120	; 0x78
 8001460:	f000 fa4c 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001464:	22a6      	movs	r2, #166	; 0xa6
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	; 0x78
 800146a:	f000 fa47 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800146e:	22a8      	movs	r2, #168	; 0xa8
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	; 0x78
 8001474:	f000 fa42 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001478:	223f      	movs	r2, #63	; 0x3f
 800147a:	2100      	movs	r1, #0
 800147c:	2078      	movs	r0, #120	; 0x78
 800147e:	f000 fa3d 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001482:	22a4      	movs	r2, #164	; 0xa4
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	; 0x78
 8001488:	f000 fa38 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800148c:	22d3      	movs	r2, #211	; 0xd3
 800148e:	2100      	movs	r1, #0
 8001490:	2078      	movs	r0, #120	; 0x78
 8001492:	f000 fa33 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	; 0x78
 800149c:	f000 fa2e 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014a0:	22d5      	movs	r2, #213	; 0xd5
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	; 0x78
 80014a6:	f000 fa29 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014aa:	22f0      	movs	r2, #240	; 0xf0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f000 fa24 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014b4:	22d9      	movs	r2, #217	; 0xd9
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	; 0x78
 80014ba:	f000 fa1f 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014be:	2222      	movs	r2, #34	; 0x22
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	; 0x78
 80014c4:	f000 fa1a 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014c8:	22da      	movs	r2, #218	; 0xda
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	; 0x78
 80014ce:	f000 fa15 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014d2:	2212      	movs	r2, #18
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	; 0x78
 80014d8:	f000 fa10 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014dc:	22db      	movs	r2, #219	; 0xdb
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	; 0x78
 80014e2:	f000 fa0b 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014e6:	2220      	movs	r2, #32
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	; 0x78
 80014ec:	f000 fa06 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80014f0:	228d      	movs	r2, #141	; 0x8d
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	; 0x78
 80014f6:	f000 fa01 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80014fa:	2214      	movs	r2, #20
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	; 0x78
 8001500:	f000 f9fc 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001504:	22af      	movs	r2, #175	; 0xaf
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	; 0x78
 800150a:	f000 f9f7 	bl	80018fc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800150e:	222e      	movs	r2, #46	; 0x2e
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 f9f2 	bl	80018fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 f843 	bl	80015a4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800151e:	f000 f813 	bl	8001548 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <SSD1306_Init+0x184>)
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SSD1306_Init+0x184>)
 800152a:	2200      	movs	r2, #0
 800152c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SSD1306_Init+0x184>)
 8001530:	2201      	movs	r2, #1
 8001532:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000b4 	.word	0x200000b4
 8001544:	20000710 	.word	0x20000710

08001548 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e01d      	b.n	8001590 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3b50      	subs	r3, #80	; 0x50
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 f9cc 	bl	80018fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 f9c7 	bl	80018fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800156e:	2210      	movs	r2, #16
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 f9c2 	bl	80018fc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	01db      	lsls	r3, r3, #7
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <SSD1306_UpdateScreen+0x58>)
 800157e:	441a      	add	r2, r3
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 f953 	bl	8001830 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b07      	cmp	r3, #7
 8001594:	d9de      	bls.n	8001554 <SSD1306_UpdateScreen+0xc>
	}
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000310 	.word	0x20000310

080015a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <SSD1306_Fill+0x14>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <SSD1306_Fill+0x16>
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015be:	4619      	mov	r1, r3
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <SSD1306_Fill+0x2c>)
 80015c2:	f003 fa05 	bl	80049d0 <memset>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000310 	.word	0x20000310

080015d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
 80015de:	460b      	mov	r3, r1
 80015e0:	80bb      	strh	r3, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	70fb      	strb	r3, [r7, #3]
	if (
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ea:	d848      	bhi.n	800167e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	2b3f      	cmp	r3, #63	; 0x3f
 80015f0:	d845      	bhi.n	800167e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <SSD1306_DrawPixel+0xb4>)
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d11a      	bne.n	8001644 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800160e:	88fa      	ldrh	r2, [r7, #6]
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	b298      	uxth	r0, r3
 8001616:	4603      	mov	r3, r0
 8001618:	01db      	lsls	r3, r3, #7
 800161a:	4413      	add	r3, r2
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <SSD1306_DrawPixel+0xb8>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	b25a      	sxtb	r2, r3
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b259      	sxtb	r1, r3
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	4603      	mov	r3, r0
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <SSD1306_DrawPixel+0xb8>)
 8001640:	54d1      	strb	r1, [r2, r3]
 8001642:	e01d      	b.n	8001680 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001644:	88fa      	ldrh	r2, [r7, #6]
 8001646:	88bb      	ldrh	r3, [r7, #4]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	b298      	uxth	r0, r3
 800164c:	4603      	mov	r3, r0
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	4413      	add	r3, r2
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <SSD1306_DrawPixel+0xb8>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	b25a      	sxtb	r2, r3
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	b25b      	sxtb	r3, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	b25b      	sxtb	r3, r3
 800166a:	4013      	ands	r3, r2
 800166c:	b259      	sxtb	r1, r3
 800166e:	88fa      	ldrh	r2, [r7, #6]
 8001670:	4603      	mov	r3, r0
 8001672:	01db      	lsls	r3, r3, #7
 8001674:	4413      	add	r3, r2
 8001676:	b2c9      	uxtb	r1, r1
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <SSD1306_DrawPixel+0xb8>)
 800167a:	54d1      	strb	r1, [r2, r3]
 800167c:	e000      	b.n	8001680 <SSD1306_DrawPixel+0xac>
		return;
 800167e:	bf00      	nop
	}
}
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000710 	.word	0x20000710
 800168c:	20000310 	.word	0x20000310

08001690 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SSD1306_GotoXY+0x28>)
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <SSD1306_GotoXY+0x28>)
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	8053      	strh	r3, [r2, #2]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000710 	.word	0x20000710

080016bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016cc:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <SSD1306_Putc+0xfc>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
	if (
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	dc07      	bgt.n	80016ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <SSD1306_Putc+0xfc>)
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	461a      	mov	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016e8:	2b3f      	cmp	r3, #63	; 0x3f
 80016ea:	dd01      	ble.n	80016f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e05e      	b.n	80017ae <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e04b      	b.n	800178e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	3b20      	subs	r3, #32
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	7849      	ldrb	r1, [r1, #1]
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4619      	mov	r1, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	e030      	b.n	800177c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <SSD1306_Putc+0xfc>)
 800172c:	881a      	ldrh	r2, [r3, #0]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b298      	uxth	r0, r3
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <SSD1306_Putc+0xfc>)
 8001738:	885a      	ldrh	r2, [r3, #2]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	b29b      	uxth	r3, r3
 8001742:	79ba      	ldrb	r2, [r7, #6]
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff ff45 	bl	80015d4 <SSD1306_DrawPixel>
 800174a:	e014      	b.n	8001776 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <SSD1306_Putc+0xfc>)
 800174e:	881a      	ldrh	r2, [r3, #0]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b298      	uxth	r0, r3
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <SSD1306_Putc+0xfc>)
 800175a:	885a      	ldrh	r2, [r3, #2]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b299      	uxth	r1, r3
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf0c      	ite	eq
 800176a:	2301      	moveq	r3, #1
 800176c:	2300      	movne	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	f7ff ff2f 	bl	80015d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3301      	adds	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4293      	cmp	r3, r2
 8001786:	d3c8      	bcc.n	800171a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	461a      	mov	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	4293      	cmp	r3, r2
 8001798:	d3ad      	bcc.n	80016f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <SSD1306_Putc+0xfc>)
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SSD1306_Putc+0xfc>)
 80017aa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000710 	.word	0x20000710

080017bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	4613      	mov	r3, r2
 80017c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017ca:	e012      	b.n	80017f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff71 	bl	80016bc <SSD1306_Putc>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d002      	beq.n	80017ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	e008      	b.n	80017fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e8      	bne.n	80017cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	781b      	ldrb	r3, [r3, #0]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <ssd1306_I2C_Init+0x24>)
 8001810:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001812:	e002      	b.n	800181a <ssd1306_I2C_Init+0x12>
		p--;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
	while(p>0)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	0003d090 	.word	0x0003d090

08001830 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b0c7      	sub	sp, #284	; 0x11c
 8001834:	af02      	add	r7, sp, #8
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800183e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001842:	600a      	str	r2, [r1, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800184a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800184e:	4622      	mov	r2, r4
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001856:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800185a:	4602      	mov	r2, r0
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001866:	460a      	mov	r2, r1
 8001868:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800186a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800186e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001872:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001876:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001884:	e015      	b.n	80018b2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001886:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800188a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800188e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	441a      	add	r2, r3
 8001896:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800189a:	3301      	adds	r3, #1
 800189c:	7811      	ldrb	r1, [r2, #0]
 800189e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80018a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ac:	3301      	adds	r3, #1
 80018ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d8df      	bhi.n	8001886 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b299      	uxth	r1, r3
 80018d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f107 020c 	add.w	r2, r7, #12
 80018e4:	200a      	movs	r0, #10
 80018e6:	9000      	str	r0, [sp, #0]
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <ssd1306_I2C_WriteMulti+0xc8>)
 80018ea:	f001 f837 	bl	800295c <HAL_I2C_Master_Transmit>
}
 80018ee:	bf00      	nop
 80018f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	200000b4 	.word	0x200000b4

080018fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	460b      	mov	r3, r1
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001912:	797b      	ldrb	r3, [r7, #5]
 8001914:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b299      	uxth	r1, r3
 800191a:	f107 020c 	add.w	r2, r7, #12
 800191e:	230a      	movs	r3, #10
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2302      	movs	r3, #2
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <ssd1306_I2C_Write+0x38>)
 8001926:	f001 f819 	bl	800295c <HAL_I2C_Master_Transmit>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200000b4 	.word	0x200000b4

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_MspInit+0x5c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_MspInit+0x5c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x5c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_MspInit+0x5c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_MspInit+0x60>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_MspInit+0x60>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_ADC_MspInit+0x6c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d121      	bne.n	8001a00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_ADC_MspInit+0x70>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ec:	2303      	movs	r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f0:	2303      	movs	r3, #3
 80019f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_ADC_MspInit+0x74>)
 80019fc:	f000 fcb6 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40012400 	.word	0x40012400
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010800 	.word	0x40010800

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <HAL_I2C_MspInit+0x70>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d123      	bne.n	8001a7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4c:	23c0      	movs	r3, #192	; 0xc0
 8001a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a50:	2312      	movs	r3, #18
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <HAL_I2C_MspInit+0x78>)
 8001a60:	f000 fc84 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6e:	61d3      	str	r3, [r2, #28]
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_I2C_MspInit+0x74>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_SPI_MspInit+0x88>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d12f      	bne.n	8001b10 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_SPI_MspInit+0x8c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ae0:	23a0      	movs	r3, #160	; 0xa0
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4619      	mov	r1, r3
 8001af2:	480b      	ldr	r0, [pc, #44]	; (8001b20 <HAL_SPI_MspInit+0x90>)
 8001af4:	f000 fc3a 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_SPI_MspInit+0x90>)
 8001b0c:	f000 fc2e 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40013000 	.word	0x40013000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_TIM_Base_MspInit+0x34>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10b      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_TIM_Base_MspInit+0x38>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_TIM_Base_MspInit+0x38>)
 8001b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_TIM_Base_MspInit+0x38>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40021000 	.word	0x40021000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 f8ab 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f002 fefe 	bl	80049e0 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 }
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20005000 	.word	0x20005000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	20000718 	.word	0x20000718
 8001c18:	20000868 	.word	0x20000868

08001c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c28:	f7ff fff8 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c2e:	490c      	ldr	r1, [pc, #48]	; (8001c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c44:	4c09      	ldr	r4, [pc, #36]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f002 fecb 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7ff f843 	bl	8000ce0 <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c64:	08006110 	.word	0x08006110
  ldr r2, =_sbss
 8001c68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c6c:	20000868 	.word	0x20000868

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x28>)
 8001c7e:	f043 0310 	orr.w	r3, r3, #16
 8001c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 fb3d 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fe52 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fb47 	bl	8002352 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 fb1d 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000010 	.word	0x20000010
 8001cfc:	2000000c 	.word	0x2000000c

08001d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x20>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	2000071c 	.word	0x2000071c

08001d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_GetTick+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	2000071c 	.word	0x2000071c

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffe0 	bl	8001d24 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000010 	.word	0x20000010

08001d80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0be      	b.n	8001f20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fdec 	bl	800199c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f9ab 	bl	8002120 <ADC_ConversionStop_Disable>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8099 	bne.w	8001f0e <HAL_ADC_Init+0x18e>
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8095 	bne.w	8001f0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dec:	f023 0302 	bic.w	r3, r3, #2
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7b1b      	ldrb	r3, [r3, #12]
 8001e06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e18:	d003      	beq.n	8001e22 <HAL_ADC_Init+0xa2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_ADC_Init+0xa8>
 8001e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_Init+0xaa>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7d1b      	ldrb	r3, [r3, #20]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d119      	bne.n	8001e6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7b1b      	ldrb	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	035a      	lsls	r2, r3, #13
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e00b      	b.n	8001e6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_ADC_Init+0x1a8>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d003      	beq.n	8001ea6 <HAL_ADC_Init+0x126>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_ADC_Init+0x1ac>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10b      	bne.n	8001eec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eea:	e018      	b.n	8001f1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f023 0312 	bic.w	r3, r3, #18
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0c:	e007      	b.n	8001f1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f043 0210 	orr.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	ffe1f7fd 	.word	0xffe1f7fd
 8001f2c:	ff1f0efe 	.word	0xff1f0efe

08001f30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x20>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0dc      	b.n	800210a <HAL_ADC_ConfigChannel+0x1da>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	d81c      	bhi.n	8001f9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b05      	subs	r3, #5
 8001f72:	221f      	movs	r2, #31
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4019      	ands	r1, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b05      	subs	r3, #5
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
 8001f98:	e03c      	b.n	8002014 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d81c      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b23      	subs	r3, #35	; 0x23
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4019      	ands	r1, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b23      	subs	r3, #35	; 0x23
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fda:	e01b      	b.n	8002014 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b41      	subs	r3, #65	; 0x41
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b41      	subs	r3, #65	; 0x41
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b09      	cmp	r3, #9
 800201a:	d91c      	bls.n	8002056 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68d9      	ldr	r1, [r3, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	3b1e      	subs	r3, #30
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6898      	ldr	r0, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	3b1e      	subs	r3, #30
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	e019      	b.n	800208a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	2207      	movs	r2, #7
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	4019      	ands	r1, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6898      	ldr	r0, [r3, #8]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b10      	cmp	r3, #16
 8002090:	d003      	beq.n	800209a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002096:	2b11      	cmp	r3, #17
 8002098:	d132      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_ADC_ConfigChannel+0x1e4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d125      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d126      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d11a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_ADC_ConfigChannel+0x1e8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_ADC_ConfigChannel+0x1ec>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9a      	lsrs	r2, r3, #18
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x1b2>
 80020ee:	e007      	b.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40012400 	.word	0x40012400
 8002118:	20000008 	.word	0x20000008
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12e      	bne.n	8002198 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214a:	f7ff fdeb 	bl	8001d24 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002150:	e01b      	b.n	800218a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002152:	f7ff fde7 	bl	8001d24 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d914      	bls.n	800218a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d0dc      	beq.n	8002152 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff90 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff49 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff5e 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff90 	bl	800225c <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5f 	bl	8002208 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffb0 	bl	80022c0 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237e:	e169      	b.n	8002654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002380:	2201      	movs	r2, #1
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8158 	bne.w	800264e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a9a      	ldr	r2, [pc, #616]	; (800260c <HAL_GPIO_Init+0x2a0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d05e      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023a8:	4a98      	ldr	r2, [pc, #608]	; (800260c <HAL_GPIO_Init+0x2a0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d875      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023ae:	4a98      	ldr	r2, [pc, #608]	; (8002610 <HAL_GPIO_Init+0x2a4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d058      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023b4:	4a96      	ldr	r2, [pc, #600]	; (8002610 <HAL_GPIO_Init+0x2a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d86f      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023ba:	4a96      	ldr	r2, [pc, #600]	; (8002614 <HAL_GPIO_Init+0x2a8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d052      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023c0:	4a94      	ldr	r2, [pc, #592]	; (8002614 <HAL_GPIO_Init+0x2a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d869      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023c6:	4a94      	ldr	r2, [pc, #592]	; (8002618 <HAL_GPIO_Init+0x2ac>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d04c      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023cc:	4a92      	ldr	r2, [pc, #584]	; (8002618 <HAL_GPIO_Init+0x2ac>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d863      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023d2:	4a92      	ldr	r2, [pc, #584]	; (800261c <HAL_GPIO_Init+0x2b0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d046      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023d8:	4a90      	ldr	r2, [pc, #576]	; (800261c <HAL_GPIO_Init+0x2b0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d85d      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d82a      	bhi.n	8002438 <HAL_GPIO_Init+0xcc>
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d859      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_GPIO_Init+0x80>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	08002467 	.word	0x08002467
 80023f0:	08002441 	.word	0x08002441
 80023f4:	08002453 	.word	0x08002453
 80023f8:	08002495 	.word	0x08002495
 80023fc:	0800249b 	.word	0x0800249b
 8002400:	0800249b 	.word	0x0800249b
 8002404:	0800249b 	.word	0x0800249b
 8002408:	0800249b 	.word	0x0800249b
 800240c:	0800249b 	.word	0x0800249b
 8002410:	0800249b 	.word	0x0800249b
 8002414:	0800249b 	.word	0x0800249b
 8002418:	0800249b 	.word	0x0800249b
 800241c:	0800249b 	.word	0x0800249b
 8002420:	0800249b 	.word	0x0800249b
 8002424:	0800249b 	.word	0x0800249b
 8002428:	0800249b 	.word	0x0800249b
 800242c:	0800249b 	.word	0x0800249b
 8002430:	08002449 	.word	0x08002449
 8002434:	0800245d 	.word	0x0800245d
 8002438:	4a79      	ldr	r2, [pc, #484]	; (8002620 <HAL_GPIO_Init+0x2b4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800243e:	e02c      	b.n	800249a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e029      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	3304      	adds	r3, #4
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e024      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	3308      	adds	r3, #8
 8002458:	623b      	str	r3, [r7, #32]
          break;
 800245a:	e01f      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	330c      	adds	r3, #12
 8002462:	623b      	str	r3, [r7, #32]
          break;
 8002464:	e01a      	b.n	800249c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800246e:	2304      	movs	r3, #4
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e013      	b.n	800249c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800247c:	2308      	movs	r3, #8
 800247e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	611a      	str	r2, [r3, #16]
          break;
 8002486:	e009      	b.n	800249c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002488:	2308      	movs	r3, #8
 800248a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	615a      	str	r2, [r3, #20]
          break;
 8002492:	e003      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x130>
          break;
 800249a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d801      	bhi.n	80024a6 <HAL_GPIO_Init+0x13a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	e001      	b.n	80024aa <HAL_GPIO_Init+0x13e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d802      	bhi.n	80024b8 <HAL_GPIO_Init+0x14c>
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x152>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3b08      	subs	r3, #8
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	210f      	movs	r1, #15
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80b1 	beq.w	800264e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <HAL_GPIO_Init+0x2bc>)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a40      	ldr	r2, [pc, #256]	; (800262c <HAL_GPIO_Init+0x2c0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_GPIO_Init+0x1ec>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <HAL_GPIO_Init+0x2c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00d      	beq.n	8002554 <HAL_GPIO_Init+0x1e8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3e      	ldr	r2, [pc, #248]	; (8002634 <HAL_GPIO_Init+0x2c8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_GPIO_Init+0x1e4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <HAL_GPIO_Init+0x2cc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_GPIO_Init+0x1e0>
 8002548:	2303      	movs	r3, #3
 800254a:	e006      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 800254c:	2304      	movs	r3, #4
 800254e:	e004      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002550:	2302      	movs	r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002558:	2300      	movs	r3, #0
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	4093      	lsls	r3, r2
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800256a:	492f      	ldr	r1, [pc, #188]	; (8002628 <HAL_GPIO_Init+0x2bc>)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	492c      	ldr	r1, [pc, #176]	; (800263c <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4928      	ldr	r1, [pc, #160]	; (800263c <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	491e      	ldr	r1, [pc, #120]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4918      	ldr	r1, [pc, #96]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4914      	ldr	r1, [pc, #80]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d021      	beq.n	8002640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e021      	b.n	800264e <HAL_GPIO_Init+0x2e2>
 800260a:	bf00      	nop
 800260c:	10320000 	.word	0x10320000
 8002610:	10310000 	.word	0x10310000
 8002614:	10220000 	.word	0x10220000
 8002618:	10210000 	.word	0x10210000
 800261c:	10120000 	.word	0x10120000
 8002620:	10110000 	.word	0x10110000
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	40010800 	.word	0x40010800
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40011000 	.word	0x40011000
 8002638:	40011400 	.word	0x40011400
 800263c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_GPIO_Init+0x304>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	43db      	mvns	r3, r3
 8002648:	4909      	ldr	r1, [pc, #36]	; (8002670 <HAL_GPIO_Init+0x304>)
 800264a:	4013      	ands	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3301      	adds	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f47f ae8e 	bne.w	8002380 <HAL_GPIO_Init+0x14>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	372c      	adds	r7, #44	; 0x2c
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]
 80026ae:	4613      	mov	r3, r2
 80026b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b2:	787b      	ldrb	r3, [r7, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	041a      	lsls	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	611a      	str	r2, [r3, #16]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e12b      	b.n	800293e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff f98a 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002738:	f001 f960 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 800273c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a81      	ldr	r2, [pc, #516]	; (8002948 <HAL_I2C_Init+0x274>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d807      	bhi.n	8002758 <HAL_I2C_Init+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a80      	ldr	r2, [pc, #512]	; (800294c <HAL_I2C_Init+0x278>)
 800274c:	4293      	cmp	r3, r2
 800274e:	bf94      	ite	ls
 8002750:	2301      	movls	r3, #1
 8002752:	2300      	movhi	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e006      	b.n	8002766 <HAL_I2C_Init+0x92>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a7d      	ldr	r2, [pc, #500]	; (8002950 <HAL_I2C_Init+0x27c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e7      	b.n	800293e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a78      	ldr	r2, [pc, #480]	; (8002954 <HAL_I2C_Init+0x280>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_I2C_Init+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d802      	bhi.n	80027a8 <HAL_I2C_Init+0xd4>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	e009      	b.n	80027bc <HAL_I2C_Init+0xe8>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a69      	ldr	r2, [pc, #420]	; (8002958 <HAL_I2C_Init+0x284>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	3301      	adds	r3, #1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	495c      	ldr	r1, [pc, #368]	; (8002948 <HAL_I2C_Init+0x274>)
 80027d8:	428b      	cmp	r3, r1
 80027da:	d819      	bhi.n	8002810 <HAL_I2C_Init+0x13c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e59      	subs	r1, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027f0:	400b      	ands	r3, r1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_I2C_Init+0x138>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e59      	subs	r1, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb1 f3f3 	udiv	r3, r1, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	e051      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800280c:	2304      	movs	r3, #4
 800280e:	e04f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_I2C_Init+0x168>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e012      	b.n	8002862 <HAL_I2C_Init+0x18e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x196>
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10e      	bne.n	8002890 <HAL_I2C_Init+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e58      	subs	r0, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	fbb0 f3f3 	udiv	r3, r0, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288e:	e00f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	0099      	lsls	r1, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	6809      	ldr	r1, [r1, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6911      	ldr	r1, [r2, #16]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68d2      	ldr	r2, [r2, #12]
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	000186a0 	.word	0x000186a0
 800294c:	001e847f 	.word	0x001e847f
 8002950:	003d08ff 	.word	0x003d08ff
 8002954:	431bde83 	.word	0x431bde83
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
 800296c:	4613      	mov	r3, r2
 800296e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff f9d8 	bl	8001d24 <HAL_GetTick>
 8002974:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	f040 80e0 	bne.w	8002b44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2319      	movs	r3, #25
 800298a:	2201      	movs	r2, #1
 800298c:	4970      	ldr	r1, [pc, #448]	; (8002b50 <HAL_I2C_Master_Transmit+0x1f4>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa92 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	e0d3      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x50>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0cc      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d007      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2221      	movs	r2, #33	; 0x21
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2210      	movs	r2, #16
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a14:	8979      	ldrh	r1, [r7, #10]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f9ca 	bl	8002db4 <I2C_MasterRequestWrite>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e08d      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a40:	e066      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fb50 	bl	80030ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d107      	bne.n	8002a6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x188>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d017      	beq.n	8002ae4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6a39      	ldr	r1, [r7, #32]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb47 	bl	800317c <I2C_WaitOnBTFFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d107      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e01a      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d194      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	00100002 	.word	0x00100002
 8002b54:	ffff0000 	.word	0xffff0000

08002b58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff f8dc 	bl	8001d24 <HAL_GetTick>
 8002b6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	f040 8111 	bne.w	8002da2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2319      	movs	r3, #25
 8002b86:	2201      	movs	r2, #1
 8002b88:	4988      	ldr	r1, [pc, #544]	; (8002dac <HAL_I2C_IsDeviceReady+0x254>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f994 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	e104      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2C_IsDeviceReady+0x50>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0fd      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d007      	beq.n	8002bce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2224      	movs	r2, #36	; 0x24
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a70      	ldr	r2, [pc, #448]	; (8002db0 <HAL_I2C_IsDeviceReady+0x258>)
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f952 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c28:	d103      	bne.n	8002c32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0b6      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c46:	f7ff f86d 	bl	8001d24 <HAL_GetTick>
 8002c4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c7a:	e025      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7ff f852 	bl	8001d24 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d302      	bcc.n	8002c92 <HAL_I2C_IsDeviceReady+0x13a>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22a0      	movs	r2, #160	; 0xa0
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2ba0      	cmp	r3, #160	; 0xa0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_I2C_IsDeviceReady+0x188>
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_I2C_IsDeviceReady+0x188>
 8002cda:	7dbb      	ldrb	r3, [r7, #22]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0cd      	beq.n	8002c7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d129      	bne.n	8002d4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2319      	movs	r3, #25
 8002d22:	2201      	movs	r2, #1
 8002d24:	4921      	ldr	r1, [pc, #132]	; (8002dac <HAL_I2C_IsDeviceReady+0x254>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f8c6 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e036      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e02c      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	490f      	ldr	r1, [pc, #60]	; (8002dac <HAL_I2C_IsDeviceReady+0x254>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8a2 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e012      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f4ff af32 	bcc.w	8002bf2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00100002 	.word	0x00100002
 8002db0:	ffff0000 	.word	0xffff0000

08002db4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d006      	beq.n	8002dde <I2C_MasterRequestWrite+0x2a>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d003      	beq.n	8002dde <I2C_MasterRequestWrite+0x2a>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ddc:	d108      	bne.n	8002df0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e00b      	b.n	8002e08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	2b12      	cmp	r3, #18
 8002df6:	d107      	bne.n	8002e08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f84f 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2e:	d103      	bne.n	8002e38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e035      	b.n	8002ea8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e44:	d108      	bne.n	8002e58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e01b      	b.n	8002e90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e58:	897b      	ldrh	r3, [r7, #10]
 8002e5a:	11db      	asrs	r3, r3, #7
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f003 0306 	and.w	r3, r3, #6
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f063 030f 	orn	r3, r3, #15
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <I2C_MasterRequestWrite+0xfc>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f898 	bl	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e010      	b.n	8002ea8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <I2C_MasterRequestWrite+0x100>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f888 	bl	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	00010008 	.word	0x00010008
 8002eb4:	00010002 	.word	0x00010002

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e048      	b.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d044      	beq.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe ff27 	bl	8001d24 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d139      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10d      	bne.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	e00c      	b.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d116      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e023      	b.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	0c1b      	lsrs	r3, r3, #16
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10d      	bne.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	e00c      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d093      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fba:	e071      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d123      	bne.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e067      	b.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d041      	beq.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fe fe82 	bl	8001d24 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d136      	bne.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d10c      	bne.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e00b      	b.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e021      	b.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d10c      	bne.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e00b      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f47f af6d 	bne.w	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f886 	bl	800320c <I2C_IsAcknowledgeFailed>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e034      	b.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d028      	beq.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fe fe07 	bl	8001d24 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11d      	bne.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d016      	beq.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e007      	b.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d1c3      	bne.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003188:	e034      	b.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f83e 	bl	800320c <I2C_IsAcknowledgeFailed>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e034      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d028      	beq.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe fdbf 	bl	8001d24 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11d      	bne.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d016      	beq.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e007      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d1c3      	bne.n	800318a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d11b      	bne.n	800325c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e272      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8087 	beq.w	8003396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003288:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b04      	cmp	r3, #4
 8003292:	d00c      	beq.n	80032ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d112      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5e>
 80032a0:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ae:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d06c      	beq.n	8003394 <HAL_RCC_OscConfig+0x12c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d168      	bne.n	8003394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e24c      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x76>
 80032d0:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a7f      	ldr	r2, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e02e      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b7b      	ldr	r3, [pc, #492]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b78      	ldr	r3, [pc, #480]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a77      	ldr	r2, [pc, #476]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0xbc>
 800330a:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a71      	ldr	r2, [pc, #452]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6e      	ldr	r2, [pc, #440]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xd4>
 8003324:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6a      	ldr	r2, [pc, #424]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b68      	ldr	r3, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a67      	ldr	r2, [pc, #412]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fcee 	bl	8001d24 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fcea 	bl	8001d24 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e200      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xe4>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fcda 	bl	8001d24 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fcd6 	bl	8001d24 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1ec      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x10c>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a2:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ae:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x18c>
 80033ba:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x176>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1c0      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4939      	ldr	r1, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_RCC_OscConfig+0x270>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fc8f 	bl	8001d24 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fc8b 	bl	8001d24 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1a1      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4927      	ldr	r1, [pc, #156]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x270>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fc6e 	bl	8001d24 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe fc6a 	bl	8001d24 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e180      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03a      	beq.n	80034ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d019      	beq.n	80034b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fc4e 	bl	8001d24 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fc4a 	bl	8001d24 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e160      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f000 faba 	bl	8003a24 <RCC_Delay>
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fe fc34 	bl	8001d24 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034be:	e00f      	b.n	80034e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe fc30 	bl	8001d24 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d908      	bls.n	80034e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e146      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	42420000 	.word	0x42420000
 80034dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e9      	bne.n	80034c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a6 	beq.w	8003646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b8b      	ldr	r3, [pc, #556]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4a87      	ldr	r2, [pc, #540]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	61d3      	str	r3, [r2, #28]
 8003516:	4b85      	ldr	r3, [pc, #532]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x4c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x4c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7e      	ldr	r2, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x4c8>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fe fbf1 	bl	8001d24 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe fbed 	bl	8001d24 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b64      	cmp	r3, #100	; 0x64
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e103      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b75      	ldr	r3, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x4c8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x312>
 800356c:	4b6f      	ldr	r3, [pc, #444]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e02d      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x334>
 8003582:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a69      	ldr	r2, [pc, #420]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a66      	ldr	r2, [pc, #408]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	6213      	str	r3, [r2, #32]
 800359a:	e01c      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x356>
 80035a4:	4b61      	ldr	r3, [pc, #388]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a60      	ldr	r2, [pc, #384]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	4b5e      	ldr	r3, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a5d      	ldr	r2, [pc, #372]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6213      	str	r3, [r2, #32]
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0x36e>
 80035be:	4b5b      	ldr	r3, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a5a      	ldr	r2, [pc, #360]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6213      	str	r3, [r2, #32]
 80035ca:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d015      	beq.n	800360a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe fba1 	bl	8001d24 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fe fb9d 	bl	8001d24 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0b1      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ee      	beq.n	80035e6 <HAL_RCC_OscConfig+0x37e>
 8003608:	e014      	b.n	8003634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fe fb8b 	bl	8001d24 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe fb87 	bl	8001d24 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e09b      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ee      	bne.n	8003612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b3c      	ldr	r3, [pc, #240]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8087 	beq.w	800375e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d061      	beq.n	8003720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d146      	bne.n	80036f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fb5b 	bl	8001d24 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fb57 	bl	8001d24 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e06d      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d108      	bne.n	80036ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4921      	ldr	r1, [pc, #132]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a19      	ldr	r1, [r3, #32]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	430b      	orrs	r3, r1
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe fb2b 	bl	8001d24 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe fb27 	bl	8001d24 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e03d      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46a>
 80036f0:	e035      	b.n	800375e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe fb14 	bl	8001d24 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fb10 	bl	8001d24 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e026      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x4c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x498>
 800371e:	e01e      	b.n	800375e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e019      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
 8003734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x500>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	429a      	cmp	r2, r3
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000

0800376c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0d0      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d910      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b67      	ldr	r3, [pc, #412]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4965      	ldr	r1, [pc, #404]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d040      	beq.n	800388c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d115      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e073      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4936      	ldr	r1, [pc, #216]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800385c:	f7fe fa62 	bl	8001d24 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fe fa5e 	bl	8001d24 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e053      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d1eb      	bne.n	8003864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d210      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4922      	ldr	r1, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1cc>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f9c0 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40022000 	.word	0x40022000
 8003930:	40021000 	.word	0x40021000
 8003934:	080060a0 	.word	0x080060a0
 8003938:	20000008 	.word	0x20000008
 800393c:	2000000c 	.word	0x2000000c

08003940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b04      	cmp	r3, #4
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x30>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x36>
 800396e:	e027      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003972:	613b      	str	r3, [r7, #16]
      break;
 8003974:	e027      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	0c9b      	lsrs	r3, r3, #18
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d010      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0c5b      	lsrs	r3, r3, #17
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e004      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	613b      	str	r3, [r7, #16]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039c2:	613b      	str	r3, [r7, #16]
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	693b      	ldr	r3, [r7, #16]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	007a1200 	.word	0x007a1200
 80039dc:	080060b8 	.word	0x080060b8
 80039e0:	080060c8 	.word	0x080060c8
 80039e4:	003d0900 	.word	0x003d0900

080039e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20000008 	.word	0x20000008

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a00:	f7ff fff2 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	080060b0 	.word	0x080060b0

08003a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <RCC_Delay+0x34>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <RCC_Delay+0x38>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a40:	bf00      	nop
  }
  while (Delay --);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <RCC_Delay+0x1c>
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000008 	.word	0x20000008
 8003a5c:	10624dd3 	.word	0x10624dd3

08003a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d07d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	61d3      	str	r3, [r2, #28]
 8003a98:	4b49      	ldr	r3, [pc, #292]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d118      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f930 	bl	8001d24 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	e008      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fe f92c 	bl	8001d24 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e06d      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02e      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d027      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f8fb 	bl	8001d24 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe f8f7 	bl	8001d24 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e036      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ee      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4917      	ldr	r1, [pc, #92]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	490b      	ldr	r1, [pc, #44]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	42420440 	.word	0x42420440

08003bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e076      	b.n	8003ccc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d009      	beq.n	8003c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
 8003bf6:	e005      	b.n	8003c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd ff36 	bl	8001a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	ea42 0103 	orr.w	r1, r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	0c1a      	lsrs	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f002 0204 	and.w	r2, r2, #4
 8003caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_SPI_Transmit+0x22>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e12d      	b.n	8003f52 <HAL_SPI_Transmit+0x27e>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfe:	f7fe f811 	bl	8001d24 <HAL_GetTick>
 8003d02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d18:	e116      	b.n	8003f48 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_SPI_Transmit+0x52>
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2a:	e10d      	b.n	8003f48 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d10f      	bne.n	8003d94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d007      	beq.n	8003db2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d14f      	bne.n	8003e5c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Transmit+0xf6>
 8003dc4:	8afb      	ldrh	r3, [r7, #22]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d142      	bne.n	8003e50 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	881a      	ldrh	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dee:	e02f      	b.n	8003e50 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d112      	bne.n	8003e24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e22:	e015      	b.n	8003e50 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e24:	f7fd ff7e 	bl	8001d24 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d803      	bhi.n	8003e3c <HAL_SPI_Transmit+0x168>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d102      	bne.n	8003e42 <HAL_SPI_Transmit+0x16e>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e4e:	e07b      	b.n	8003f48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ca      	bne.n	8003df0 <HAL_SPI_Transmit+0x11c>
 8003e5a:	e050      	b.n	8003efe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_Transmit+0x196>
 8003e64:	8afb      	ldrh	r3, [r7, #22]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d144      	bne.n	8003ef4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e90:	e030      	b.n	8003ef4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d113      	bne.n	8003ec8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ec6:	e015      	b.n	8003ef4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec8:	f7fd ff2c 	bl	8001d24 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d803      	bhi.n	8003ee0 <HAL_SPI_Transmit+0x20c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Transmit+0x212>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ef2:	e029      	b.n	8003f48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1c9      	bne.n	8003e92 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa6e 	bl	80043e4 <SPI_EndRxTxTransaction>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e003      	b.n	8003f48 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08c      	sub	sp, #48	; 0x30
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x26>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e198      	b.n	80042b2 <HAL_SPI_TransmitReceive+0x358>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fd fecc 	bl	8001d24 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d00f      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x70>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb0:	d107      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x68>
 8003fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fc8:	e16d      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x82>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x82>
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe2:	e160      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d003      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	887a      	ldrh	r2, [r7, #2]
 800401a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d007      	beq.n	800404c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004054:	d17c      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x10a>
 800405e:	8b7b      	ldrh	r3, [r7, #26]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d16a      	bne.n	800413a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004088:	e057      	b.n	800413a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11b      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x176>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x176>
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d113      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d119      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x1b8>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d014      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	b292      	uxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800410e:	2301      	movs	r3, #1
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004112:	f7fd fe07 	bl	8001d24 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411e:	429a      	cmp	r2, r3
 8004120:	d80b      	bhi.n	800413a <HAL_SPI_TransmitReceive+0x1e0>
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d007      	beq.n	800413a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004138:	e0b5      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1a2      	bne.n	800408a <HAL_SPI_TransmitReceive+0x130>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d19d      	bne.n	800408a <HAL_SPI_TransmitReceive+0x130>
 800414e:	e080      	b.n	8004252 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x204>
 8004158:	8b7b      	ldrh	r3, [r7, #26]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d16f      	bne.n	800423e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	7812      	ldrb	r2, [r2, #0]
 800416a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004184:	e05b      	b.n	800423e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11c      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x274>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d017      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x274>
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d114      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d119      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x2b6>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420c:	2301      	movs	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004210:	f7fd fd88 	bl	8001d24 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421c:	429a      	cmp	r2, r3
 800421e:	d803      	bhi.n	8004228 <HAL_SPI_TransmitReceive+0x2ce>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d102      	bne.n	800422e <HAL_SPI_TransmitReceive+0x2d4>
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800423c:	e033      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d19e      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x22c>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d199      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8c4 	bl	80043e4 <SPI_EndRxTxTransaction>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800426e:	e01a      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429c:	e003      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3730      	adds	r7, #48	; 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c8:	b2db      	uxtb	r3, r3
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e4:	f7fd fd1e 	bl	8001d24 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f4:	f7fd fd16 	bl	8001d24 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	e054      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d050      	beq.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004314:	f7fd fd06 	bl	8001d24 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d13d      	bne.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d111      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d004      	beq.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d107      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d10f      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e017      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d19b      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000008 	.word	0x20000008

080043e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff ff6a 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e000      	b.n	8004418 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e041      	b.n	80044b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd fb6c 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f000 f940 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d001      	beq.n	80044d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_TIM_Base_Start+0x88>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_TIM_Base_Start+0x48>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d009      	beq.n	8004508 <HAL_TIM_Base_Start+0x48>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <HAL_TIM_Base_Start+0x8c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_TIM_Base_Start+0x48>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <HAL_TIM_Base_Start+0x90>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d111      	bne.n	800452c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b06      	cmp	r3, #6
 8004518:	d010      	beq.n	800453c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	e007      	b.n	800453c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800

08004554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIM_ConfigClockSource+0x1c>
 800456c:	2302      	movs	r3, #2
 800456e:	e0b4      	b.n	80046da <HAL_TIM_ConfigClockSource+0x186>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800458e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a8:	d03e      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0xd4>
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	f200 8087 	bhi.w	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	f000 8086 	beq.w	80046c6 <HAL_TIM_ConfigClockSource+0x172>
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045be:	d87f      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d01a      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xa6>
 80045c4:	2b70      	cmp	r3, #112	; 0x70
 80045c6:	d87b      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b60      	cmp	r3, #96	; 0x60
 80045ca:	d050      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x11a>
 80045cc:	2b60      	cmp	r3, #96	; 0x60
 80045ce:	d877      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d03c      	beq.n	800464e <HAL_TIM_ConfigClockSource+0xfa>
 80045d4:	2b50      	cmp	r3, #80	; 0x50
 80045d6:	d873      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d058      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x13a>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d86f      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d064      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d86b      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d060      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d867      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d05c      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d05a      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	e062      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800460a:	f000 f944 	bl	8004896 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800461c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	609a      	str	r2, [r3, #8]
      break;
 8004626:	e04f      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004638:	f000 f92d 	bl	8004896 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464a:	609a      	str	r2, [r3, #8]
      break;
 800464c:	e03c      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	461a      	mov	r2, r3
 800465c:	f000 f8a4 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2150      	movs	r1, #80	; 0x50
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f8fb 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 800466c:	e02c      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800467a:	461a      	mov	r2, r3
 800467c:	f000 f8c2 	bl	8004804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2160      	movs	r1, #96	; 0x60
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f8eb 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 800468c:	e01c      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	461a      	mov	r2, r3
 800469c:	f000 f884 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f8db 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80046ac:	e00c      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f000 f8d2 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80046be:	e003      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e000      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a29      	ldr	r2, [pc, #164]	; (800479c <TIM_Base_SetConfig+0xb8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <TIM_Base_SetConfig+0xbc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <TIM_Base_SetConfig+0xc0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <TIM_Base_SetConfig+0xb8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <TIM_Base_SetConfig+0xbc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <TIM_Base_SetConfig+0xc0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <TIM_Base_SetConfig+0xb8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800

080047a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0210 	bic.w	r2, r3, #16
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	031b      	lsls	r3, r3, #12
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr

08004862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	f043 0307 	orr.w	r3, r3, #7
 8004884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	021a      	lsls	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4313      	orrs	r3, r2
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e046      	b.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d009      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a10      	ldr	r2, [pc, #64]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10c      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4313      	orrs	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800

08004990 <siprintf>:
 8004990:	b40e      	push	{r1, r2, r3}
 8004992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004996:	b500      	push	{lr}
 8004998:	b09c      	sub	sp, #112	; 0x70
 800499a:	ab1d      	add	r3, sp, #116	; 0x74
 800499c:	9002      	str	r0, [sp, #8]
 800499e:	9006      	str	r0, [sp, #24]
 80049a0:	9107      	str	r1, [sp, #28]
 80049a2:	9104      	str	r1, [sp, #16]
 80049a4:	4808      	ldr	r0, [pc, #32]	; (80049c8 <siprintf+0x38>)
 80049a6:	4909      	ldr	r1, [pc, #36]	; (80049cc <siprintf+0x3c>)
 80049a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ac:	9105      	str	r1, [sp, #20]
 80049ae:	6800      	ldr	r0, [r0, #0]
 80049b0:	a902      	add	r1, sp, #8
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	f000 f99c 	bl	8004cf0 <_svfiprintf_r>
 80049b8:	2200      	movs	r2, #0
 80049ba:	9b02      	ldr	r3, [sp, #8]
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	b01c      	add	sp, #112	; 0x70
 80049c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c4:	b003      	add	sp, #12
 80049c6:	4770      	bx	lr
 80049c8:	20000060 	.word	0x20000060
 80049cc:	ffff0208 	.word	0xffff0208

080049d0 <memset>:
 80049d0:	4603      	mov	r3, r0
 80049d2:	4402      	add	r2, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000060 	.word	0x20000060

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	2600      	movs	r6, #0
 80049f0:	4d0c      	ldr	r5, [pc, #48]	; (8004a24 <__libc_init_array+0x38>)
 80049f2:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	f000 fc7a 	bl	80052f4 <_init>
 8004a00:	2600      	movs	r6, #0
 8004a02:	4d0a      	ldr	r5, [pc, #40]	; (8004a2c <__libc_init_array+0x40>)
 8004a04:	4c0a      	ldr	r4, [pc, #40]	; (8004a30 <__libc_init_array+0x44>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08006108 	.word	0x08006108
 8004a28:	08006108 	.word	0x08006108
 8004a2c:	08006108 	.word	0x08006108
 8004a30:	0800610c 	.word	0x0800610c

08004a34 <__retarget_lock_acquire_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_release_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <memcpy>:
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	4770      	bx	lr
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a50:	d1f9      	bne.n	8004a46 <memcpy+0xe>
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <_free_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4605      	mov	r5, r0
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d040      	beq.n	8004ade <_free_r+0x8a>
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f0c      	subs	r4, r1, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	18e4      	addlt	r4, r4, r3
 8004a68:	f000 f8dc 	bl	8004c24 <__malloc_lock>
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <_free_r+0x8c>)
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	b933      	cbnz	r3, 8004a80 <_free_r+0x2c>
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	6014      	str	r4, [r2, #0]
 8004a76:	4628      	mov	r0, r5
 8004a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a7c:	f000 b8d8 	b.w	8004c30 <__malloc_unlock>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d908      	bls.n	8004a96 <_free_r+0x42>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf01      	itttt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	e7ed      	b.n	8004a72 <_free_r+0x1e>
 8004a96:	461a      	mov	r2, r3
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b10b      	cbz	r3, 8004aa0 <_free_r+0x4c>
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	d9fa      	bls.n	8004a96 <_free_r+0x42>
 8004aa0:	6811      	ldr	r1, [r2, #0]
 8004aa2:	1850      	adds	r0, r2, r1
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d10b      	bne.n	8004ac0 <_free_r+0x6c>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	4401      	add	r1, r0
 8004aac:	1850      	adds	r0, r2, r1
 8004aae:	4283      	cmp	r3, r0
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	d1e0      	bne.n	8004a76 <_free_r+0x22>
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4408      	add	r0, r1
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	6053      	str	r3, [r2, #4]
 8004abe:	e7da      	b.n	8004a76 <_free_r+0x22>
 8004ac0:	d902      	bls.n	8004ac8 <_free_r+0x74>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	e7d6      	b.n	8004a76 <_free_r+0x22>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	1821      	adds	r1, r4, r0
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf01      	itttt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	1809      	addeq	r1, r1, r0
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	6054      	str	r4, [r2, #4]
 8004adc:	e7cb      	b.n	8004a76 <_free_r+0x22>
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000860 	.word	0x20000860

08004ae4 <sbrk_aligned>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4e0e      	ldr	r6, [pc, #56]	; (8004b20 <sbrk_aligned+0x3c>)
 8004ae8:	460c      	mov	r4, r1
 8004aea:	6831      	ldr	r1, [r6, #0]
 8004aec:	4605      	mov	r5, r0
 8004aee:	b911      	cbnz	r1, 8004af6 <sbrk_aligned+0x12>
 8004af0:	f000 fbaa 	bl	8005248 <_sbrk_r>
 8004af4:	6030      	str	r0, [r6, #0]
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fba5 	bl	8005248 <_sbrk_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d00a      	beq.n	8004b18 <sbrk_aligned+0x34>
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d007      	beq.n	8004b1c <sbrk_aligned+0x38>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fb9a 	bl	8005248 <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d101      	bne.n	8004b1c <sbrk_aligned+0x38>
 8004b18:	f04f 34ff 	mov.w	r4, #4294967295
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	20000864 	.word	0x20000864

08004b24 <_malloc_r>:
 8004b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	1ccd      	adds	r5, r1, #3
 8004b2a:	f025 0503 	bic.w	r5, r5, #3
 8004b2e:	3508      	adds	r5, #8
 8004b30:	2d0c      	cmp	r5, #12
 8004b32:	bf38      	it	cc
 8004b34:	250c      	movcc	r5, #12
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	4607      	mov	r7, r0
 8004b3a:	db01      	blt.n	8004b40 <_malloc_r+0x1c>
 8004b3c:	42a9      	cmp	r1, r5
 8004b3e:	d905      	bls.n	8004b4c <_malloc_r+0x28>
 8004b40:	230c      	movs	r3, #12
 8004b42:	2600      	movs	r6, #0
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4630      	mov	r0, r6
 8004b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c20 <_malloc_r+0xfc>
 8004b50:	f000 f868 	bl	8004c24 <__malloc_lock>
 8004b54:	f8d8 3000 	ldr.w	r3, [r8]
 8004b58:	461c      	mov	r4, r3
 8004b5a:	bb5c      	cbnz	r4, 8004bb4 <_malloc_r+0x90>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff ffc0 	bl	8004ae4 <sbrk_aligned>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	4604      	mov	r4, r0
 8004b68:	d155      	bne.n	8004c16 <_malloc_r+0xf2>
 8004b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8004b6e:	4626      	mov	r6, r4
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	d145      	bne.n	8004c00 <_malloc_r+0xdc>
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	d048      	beq.n	8004c0a <_malloc_r+0xe6>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	eb04 0903 	add.w	r9, r4, r3
 8004b82:	f000 fb61 	bl	8005248 <_sbrk_r>
 8004b86:	4581      	cmp	r9, r0
 8004b88:	d13f      	bne.n	8004c0a <_malloc_r+0xe6>
 8004b8a:	6821      	ldr	r1, [r4, #0]
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	1a6d      	subs	r5, r5, r1
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7ff ffa7 	bl	8004ae4 <sbrk_aligned>
 8004b96:	3001      	adds	r0, #1
 8004b98:	d037      	beq.n	8004c0a <_malloc_r+0xe6>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	442b      	add	r3, r5
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d038      	beq.n	8004c1a <_malloc_r+0xf6>
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	42a2      	cmp	r2, r4
 8004bac:	d12b      	bne.n	8004c06 <_malloc_r+0xe2>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	e00f      	b.n	8004bd4 <_malloc_r+0xb0>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	1b52      	subs	r2, r2, r5
 8004bb8:	d41f      	bmi.n	8004bfa <_malloc_r+0xd6>
 8004bba:	2a0b      	cmp	r2, #11
 8004bbc:	d917      	bls.n	8004bee <_malloc_r+0xca>
 8004bbe:	1961      	adds	r1, r4, r5
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	6059      	strne	r1, [r3, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	bf08      	it	eq
 8004bcc:	f8c8 1000 	streq.w	r1, [r8]
 8004bd0:	5162      	str	r2, [r4, r5]
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f104 060b 	add.w	r6, r4, #11
 8004bda:	f000 f829 	bl	8004c30 <__malloc_unlock>
 8004bde:	f026 0607 	bic.w	r6, r6, #7
 8004be2:	1d23      	adds	r3, r4, #4
 8004be4:	1af2      	subs	r2, r6, r3
 8004be6:	d0ae      	beq.n	8004b46 <_malloc_r+0x22>
 8004be8:	1b9b      	subs	r3, r3, r6
 8004bea:	50a3      	str	r3, [r4, r2]
 8004bec:	e7ab      	b.n	8004b46 <_malloc_r+0x22>
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	6862      	ldr	r2, [r4, #4]
 8004bf2:	d1dd      	bne.n	8004bb0 <_malloc_r+0x8c>
 8004bf4:	f8c8 2000 	str.w	r2, [r8]
 8004bf8:	e7ec      	b.n	8004bd4 <_malloc_r+0xb0>
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	6864      	ldr	r4, [r4, #4]
 8004bfe:	e7ac      	b.n	8004b5a <_malloc_r+0x36>
 8004c00:	4634      	mov	r4, r6
 8004c02:	6876      	ldr	r6, [r6, #4]
 8004c04:	e7b4      	b.n	8004b70 <_malloc_r+0x4c>
 8004c06:	4613      	mov	r3, r2
 8004c08:	e7cc      	b.n	8004ba4 <_malloc_r+0x80>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	f000 f80e 	bl	8004c30 <__malloc_unlock>
 8004c14:	e797      	b.n	8004b46 <_malloc_r+0x22>
 8004c16:	6025      	str	r5, [r4, #0]
 8004c18:	e7dc      	b.n	8004bd4 <_malloc_r+0xb0>
 8004c1a:	605b      	str	r3, [r3, #4]
 8004c1c:	deff      	udf	#255	; 0xff
 8004c1e:	bf00      	nop
 8004c20:	20000860 	.word	0x20000860

08004c24 <__malloc_lock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__malloc_lock+0x8>)
 8004c26:	f7ff bf05 	b.w	8004a34 <__retarget_lock_acquire_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	2000085c 	.word	0x2000085c

08004c30 <__malloc_unlock>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__malloc_unlock+0x8>)
 8004c32:	f7ff bf00 	b.w	8004a36 <__retarget_lock_release_recursive>
 8004c36:	bf00      	nop
 8004c38:	2000085c 	.word	0x2000085c

08004c3c <__ssputs_r>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	461f      	mov	r7, r3
 8004c42:	688e      	ldr	r6, [r1, #8]
 8004c44:	4682      	mov	sl, r0
 8004c46:	42be      	cmp	r6, r7
 8004c48:	460c      	mov	r4, r1
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	d82c      	bhi.n	8004caa <__ssputs_r+0x6e>
 8004c50:	898a      	ldrh	r2, [r1, #12]
 8004c52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c56:	d026      	beq.n	8004ca6 <__ssputs_r+0x6a>
 8004c58:	6965      	ldr	r5, [r4, #20]
 8004c5a:	6909      	ldr	r1, [r1, #16]
 8004c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c60:	eba3 0901 	sub.w	r9, r3, r1
 8004c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c68:	1c7b      	adds	r3, r7, #1
 8004c6a:	444b      	add	r3, r9
 8004c6c:	106d      	asrs	r5, r5, #1
 8004c6e:	429d      	cmp	r5, r3
 8004c70:	bf38      	it	cc
 8004c72:	461d      	movcc	r5, r3
 8004c74:	0553      	lsls	r3, r2, #21
 8004c76:	d527      	bpl.n	8004cc8 <__ssputs_r+0x8c>
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7ff ff53 	bl	8004b24 <_malloc_r>
 8004c7e:	4606      	mov	r6, r0
 8004c80:	b360      	cbz	r0, 8004cdc <__ssputs_r+0xa0>
 8004c82:	464a      	mov	r2, r9
 8004c84:	6921      	ldr	r1, [r4, #16]
 8004c86:	f7ff fed7 	bl	8004a38 <memcpy>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	6126      	str	r6, [r4, #16]
 8004c98:	444e      	add	r6, r9
 8004c9a:	6026      	str	r6, [r4, #0]
 8004c9c:	463e      	mov	r6, r7
 8004c9e:	6165      	str	r5, [r4, #20]
 8004ca0:	eba5 0509 	sub.w	r5, r5, r9
 8004ca4:	60a5      	str	r5, [r4, #8]
 8004ca6:	42be      	cmp	r6, r7
 8004ca8:	d900      	bls.n	8004cac <__ssputs_r+0x70>
 8004caa:	463e      	mov	r6, r7
 8004cac:	4632      	mov	r2, r6
 8004cae:	4641      	mov	r1, r8
 8004cb0:	6820      	ldr	r0, [r4, #0]
 8004cb2:	f000 faaf 	bl	8005214 <memmove>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	68a3      	ldr	r3, [r4, #8]
 8004cba:	1b9b      	subs	r3, r3, r6
 8004cbc:	60a3      	str	r3, [r4, #8]
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	4433      	add	r3, r6
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc8:	462a      	mov	r2, r5
 8004cca:	f000 fadb 	bl	8005284 <_realloc_r>
 8004cce:	4606      	mov	r6, r0
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d1e0      	bne.n	8004c96 <__ssputs_r+0x5a>
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	6921      	ldr	r1, [r4, #16]
 8004cd8:	f7ff febc 	bl	8004a54 <_free_r>
 8004cdc:	230c      	movs	r3, #12
 8004cde:	f8ca 3000 	str.w	r3, [sl]
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	e7e9      	b.n	8004cc4 <__ssputs_r+0x88>

08004cf0 <_svfiprintf_r>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	4698      	mov	r8, r3
 8004cf6:	898b      	ldrh	r3, [r1, #12]
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	4614      	mov	r4, r2
 8004d00:	b09d      	sub	sp, #116	; 0x74
 8004d02:	d50e      	bpl.n	8004d22 <_svfiprintf_r+0x32>
 8004d04:	690b      	ldr	r3, [r1, #16]
 8004d06:	b963      	cbnz	r3, 8004d22 <_svfiprintf_r+0x32>
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	f7ff ff0b 	bl	8004b24 <_malloc_r>
 8004d0e:	6028      	str	r0, [r5, #0]
 8004d10:	6128      	str	r0, [r5, #16]
 8004d12:	b920      	cbnz	r0, 8004d1e <_svfiprintf_r+0x2e>
 8004d14:	230c      	movs	r3, #12
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e0d0      	b.n	8004ec0 <_svfiprintf_r+0x1d0>
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	616b      	str	r3, [r5, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	9309      	str	r3, [sp, #36]	; 0x24
 8004d26:	2320      	movs	r3, #32
 8004d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	f04f 0901 	mov.w	r9, #1
 8004d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d36:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004ed8 <_svfiprintf_r+0x1e8>
 8004d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d3e:	4623      	mov	r3, r4
 8004d40:	469a      	mov	sl, r3
 8004d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d46:	b10a      	cbz	r2, 8004d4c <_svfiprintf_r+0x5c>
 8004d48:	2a25      	cmp	r2, #37	; 0x25
 8004d4a:	d1f9      	bne.n	8004d40 <_svfiprintf_r+0x50>
 8004d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d50:	d00b      	beq.n	8004d6a <_svfiprintf_r+0x7a>
 8004d52:	465b      	mov	r3, fp
 8004d54:	4622      	mov	r2, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ff6f 	bl	8004c3c <__ssputs_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f000 80a9 	beq.w	8004eb6 <_svfiprintf_r+0x1c6>
 8004d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d66:	445a      	add	r2, fp
 8004d68:	9209      	str	r2, [sp, #36]	; 0x24
 8004d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80a1 	beq.w	8004eb6 <_svfiprintf_r+0x1c6>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7e:	f10a 0a01 	add.w	sl, sl, #1
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2205      	movs	r2, #5
 8004d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d94:	4850      	ldr	r0, [pc, #320]	; (8004ed8 <_svfiprintf_r+0x1e8>)
 8004d96:	f000 fa67 	bl	8005268 <memchr>
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	b9d8      	cbnz	r0, 8004dd6 <_svfiprintf_r+0xe6>
 8004d9e:	06d0      	lsls	r0, r2, #27
 8004da0:	bf44      	itt	mi
 8004da2:	2320      	movmi	r3, #32
 8004da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004da8:	0711      	lsls	r1, r2, #28
 8004daa:	bf44      	itt	mi
 8004dac:	232b      	movmi	r3, #43	; 0x2b
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004db2:	f89a 3000 	ldrb.w	r3, [sl]
 8004db6:	2b2a      	cmp	r3, #42	; 0x2a
 8004db8:	d015      	beq.n	8004de6 <_svfiprintf_r+0xf6>
 8004dba:	4654      	mov	r4, sl
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f04f 0c0a 	mov.w	ip, #10
 8004dc2:	9a07      	ldr	r2, [sp, #28]
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dca:	3b30      	subs	r3, #48	; 0x30
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d94d      	bls.n	8004e6c <_svfiprintf_r+0x17c>
 8004dd0:	b1b0      	cbz	r0, 8004e00 <_svfiprintf_r+0x110>
 8004dd2:	9207      	str	r2, [sp, #28]
 8004dd4:	e014      	b.n	8004e00 <_svfiprintf_r+0x110>
 8004dd6:	eba0 0308 	sub.w	r3, r0, r8
 8004dda:	fa09 f303 	lsl.w	r3, r9, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	46a2      	mov	sl, r4
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	e7d2      	b.n	8004d8c <_svfiprintf_r+0x9c>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9103      	str	r1, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbb      	ittet	lt
 8004df2:	425b      	neglt	r3, r3
 8004df4:	f042 0202 	orrlt.w	r2, r2, #2
 8004df8:	9307      	strge	r3, [sp, #28]
 8004dfa:	9307      	strlt	r3, [sp, #28]
 8004dfc:	bfb8      	it	lt
 8004dfe:	9204      	strlt	r2, [sp, #16]
 8004e00:	7823      	ldrb	r3, [r4, #0]
 8004e02:	2b2e      	cmp	r3, #46	; 0x2e
 8004e04:	d10c      	bne.n	8004e20 <_svfiprintf_r+0x130>
 8004e06:	7863      	ldrb	r3, [r4, #1]
 8004e08:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0a:	d134      	bne.n	8004e76 <_svfiprintf_r+0x186>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	3402      	adds	r4, #2
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9203      	str	r2, [sp, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004edc <_svfiprintf_r+0x1ec>
 8004e24:	2203      	movs	r2, #3
 8004e26:	4650      	mov	r0, sl
 8004e28:	7821      	ldrb	r1, [r4, #0]
 8004e2a:	f000 fa1d 	bl	8005268 <memchr>
 8004e2e:	b138      	cbz	r0, 8004e40 <_svfiprintf_r+0x150>
 8004e30:	2240      	movs	r2, #64	; 0x40
 8004e32:	9b04      	ldr	r3, [sp, #16]
 8004e34:	eba0 000a 	sub.w	r0, r0, sl
 8004e38:	4082      	lsls	r2, r0
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	3401      	adds	r4, #1
 8004e3e:	9304      	str	r3, [sp, #16]
 8004e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e44:	2206      	movs	r2, #6
 8004e46:	4826      	ldr	r0, [pc, #152]	; (8004ee0 <_svfiprintf_r+0x1f0>)
 8004e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e4c:	f000 fa0c 	bl	8005268 <memchr>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d038      	beq.n	8004ec6 <_svfiprintf_r+0x1d6>
 8004e54:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <_svfiprintf_r+0x1f4>)
 8004e56:	bb1b      	cbnz	r3, 8004ea0 <_svfiprintf_r+0x1b0>
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	3307      	adds	r3, #7
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	3308      	adds	r3, #8
 8004e62:	9303      	str	r3, [sp, #12]
 8004e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e66:	4433      	add	r3, r6
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	e768      	b.n	8004d3e <_svfiprintf_r+0x4e>
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e74:	e7a6      	b.n	8004dc4 <_svfiprintf_r+0xd4>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f04f 0c0a 	mov.w	ip, #10
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	3401      	adds	r4, #1
 8004e80:	9305      	str	r3, [sp, #20]
 8004e82:	4620      	mov	r0, r4
 8004e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e88:	3a30      	subs	r2, #48	; 0x30
 8004e8a:	2a09      	cmp	r2, #9
 8004e8c:	d903      	bls.n	8004e96 <_svfiprintf_r+0x1a6>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0c6      	beq.n	8004e20 <_svfiprintf_r+0x130>
 8004e92:	9105      	str	r1, [sp, #20]
 8004e94:	e7c4      	b.n	8004e20 <_svfiprintf_r+0x130>
 8004e96:	4604      	mov	r4, r0
 8004e98:	2301      	movs	r3, #1
 8004e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e9e:	e7f0      	b.n	8004e82 <_svfiprintf_r+0x192>
 8004ea0:	ab03      	add	r3, sp, #12
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	462a      	mov	r2, r5
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <_svfiprintf_r+0x1f8>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	f3af 8000 	nop.w
 8004eb0:	1c42      	adds	r2, r0, #1
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	d1d6      	bne.n	8004e64 <_svfiprintf_r+0x174>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	065b      	lsls	r3, r3, #25
 8004eba:	f53f af2d 	bmi.w	8004d18 <_svfiprintf_r+0x28>
 8004ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ec0:	b01d      	add	sp, #116	; 0x74
 8004ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec6:	ab03      	add	r3, sp, #12
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4638      	mov	r0, r7
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <_svfiprintf_r+0x1f8>)
 8004ed0:	a904      	add	r1, sp, #16
 8004ed2:	f000 f87d 	bl	8004fd0 <_printf_i>
 8004ed6:	e7eb      	b.n	8004eb0 <_svfiprintf_r+0x1c0>
 8004ed8:	080060ca 	.word	0x080060ca
 8004edc:	080060d0 	.word	0x080060d0
 8004ee0:	080060d4 	.word	0x080060d4
 8004ee4:	00000000 	.word	0x00000000
 8004ee8:	08004c3d 	.word	0x08004c3d

08004eec <_printf_common>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	4699      	mov	r9, r3
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bfb8      	it	lt
 8004efe:	4613      	movlt	r3, r2
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f06:	460c      	mov	r4, r1
 8004f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f0c:	b10a      	cbz	r2, 8004f12 <_printf_common+0x26>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	6833      	ldrmi	r3, [r6, #0]
 8004f1a:	3302      	addmi	r3, #2
 8004f1c:	6033      	strmi	r3, [r6, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	f015 0506 	ands.w	r5, r5, #6
 8004f24:	d106      	bne.n	8004f34 <_printf_common+0x48>
 8004f26:	f104 0a19 	add.w	sl, r4, #25
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	6832      	ldr	r2, [r6, #0]
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dc2b      	bgt.n	8004f8c <_printf_common+0xa0>
 8004f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f38:	1e13      	subs	r3, r2, #0
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	bf18      	it	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	0692      	lsls	r2, r2, #26
 8004f42:	d430      	bmi.n	8004fa6 <_printf_common+0xba>
 8004f44:	4649      	mov	r1, r9
 8004f46:	4638      	mov	r0, r7
 8004f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4c:	47c0      	blx	r8
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d023      	beq.n	8004f9a <_printf_common+0xae>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	6922      	ldr	r2, [r4, #16]
 8004f56:	f003 0306 	and.w	r3, r3, #6
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	bf14      	ite	ne
 8004f5e:	2500      	movne	r5, #0
 8004f60:	6833      	ldreq	r3, [r6, #0]
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	bf08      	it	eq
 8004f68:	68e5      	ldreq	r5, [r4, #12]
 8004f6a:	f104 041a 	add.w	r4, r4, #26
 8004f6e:	bf08      	it	eq
 8004f70:	1aed      	subeq	r5, r5, r3
 8004f72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f76:	bf08      	it	eq
 8004f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bfc4      	itt	gt
 8004f80:	1a9b      	subgt	r3, r3, r2
 8004f82:	18ed      	addgt	r5, r5, r3
 8004f84:	42b5      	cmp	r5, r6
 8004f86:	d11a      	bne.n	8004fbe <_printf_common+0xd2>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e008      	b.n	8004f9e <_printf_common+0xb2>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4652      	mov	r2, sl
 8004f90:	4649      	mov	r1, r9
 8004f92:	4638      	mov	r0, r7
 8004f94:	47c0      	blx	r8
 8004f96:	3001      	adds	r0, #1
 8004f98:	d103      	bne.n	8004fa2 <_printf_common+0xb6>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	e7c1      	b.n	8004f2a <_printf_common+0x3e>
 8004fa6:	2030      	movs	r0, #48	; 0x30
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb4:	4422      	add	r2, r4
 8004fb6:	3302      	adds	r3, #2
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fbc:	e7c2      	b.n	8004f44 <_printf_common+0x58>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d0e6      	beq.n	8004f9a <_printf_common+0xae>
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7d9      	b.n	8004f84 <_printf_common+0x98>

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	4691      	mov	r9, r2
 8004fd8:	2f78      	cmp	r7, #120	; 0x78
 8004fda:	4680      	mov	r8, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	469a      	mov	sl, r3
 8004fe0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	; 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d5 	beq.w	800519c <_printf_i+0x1cc>
 8004ff2:	2f58      	cmp	r7, #88	; 0x58
 8004ff4:	f000 80c1 	beq.w	800517a <_printf_i+0x1aa>
 8004ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	; (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	08005183 	.word	0x08005183
 8005040:	080050a9 	.word	0x080050a9
 8005044:	0800513d 	.word	0x0800513d
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	080051a5 	.word	0x080051a5
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050a9 	.word	0x080050a9
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	08005145 	.word	0x08005145
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	602a      	str	r2, [r5, #0]
 8005070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e0a0      	b.n	80051be <_printf_i+0x1ee>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	0607      	lsls	r7, r0, #24
 8005082:	f103 0104 	add.w	r1, r3, #4
 8005086:	6029      	str	r1, [r5, #0]
 8005088:	d501      	bpl.n	800508e <_printf_i+0xbe>
 800508a:	681e      	ldr	r6, [r3, #0]
 800508c:	e003      	b.n	8005096 <_printf_i+0xc6>
 800508e:	0646      	lsls	r6, r0, #25
 8005090:	d5fb      	bpl.n	800508a <_printf_i+0xba>
 8005092:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005096:	2e00      	cmp	r6, #0
 8005098:	da03      	bge.n	80050a2 <_printf_i+0xd2>
 800509a:	232d      	movs	r3, #45	; 0x2d
 800509c:	4276      	negs	r6, r6
 800509e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a2:	230a      	movs	r3, #10
 80050a4:	4859      	ldr	r0, [pc, #356]	; (800520c <_printf_i+0x23c>)
 80050a6:	e012      	b.n	80050ce <_printf_i+0xfe>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	1d19      	adds	r1, r3, #4
 80050ae:	6029      	str	r1, [r5, #0]
 80050b0:	0605      	lsls	r5, r0, #24
 80050b2:	d501      	bpl.n	80050b8 <_printf_i+0xe8>
 80050b4:	681e      	ldr	r6, [r3, #0]
 80050b6:	e002      	b.n	80050be <_printf_i+0xee>
 80050b8:	0641      	lsls	r1, r0, #25
 80050ba:	d5fb      	bpl.n	80050b4 <_printf_i+0xe4>
 80050bc:	881e      	ldrh	r6, [r3, #0]
 80050be:	2f6f      	cmp	r7, #111	; 0x6f
 80050c0:	bf0c      	ite	eq
 80050c2:	2308      	moveq	r3, #8
 80050c4:	230a      	movne	r3, #10
 80050c6:	4851      	ldr	r0, [pc, #324]	; (800520c <_printf_i+0x23c>)
 80050c8:	2100      	movs	r1, #0
 80050ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ce:	6865      	ldr	r5, [r4, #4]
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	bfa8      	it	ge
 80050d4:	6821      	ldrge	r1, [r4, #0]
 80050d6:	60a5      	str	r5, [r4, #8]
 80050d8:	bfa4      	itt	ge
 80050da:	f021 0104 	bicge.w	r1, r1, #4
 80050de:	6021      	strge	r1, [r4, #0]
 80050e0:	b90e      	cbnz	r6, 80050e6 <_printf_i+0x116>
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	d04b      	beq.n	800517e <_printf_i+0x1ae>
 80050e6:	4615      	mov	r5, r2
 80050e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ec:	fb03 6711 	mls	r7, r3, r1, r6
 80050f0:	5dc7      	ldrb	r7, [r0, r7]
 80050f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050f6:	4637      	mov	r7, r6
 80050f8:	42bb      	cmp	r3, r7
 80050fa:	460e      	mov	r6, r1
 80050fc:	d9f4      	bls.n	80050e8 <_printf_i+0x118>
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d10b      	bne.n	800511a <_printf_i+0x14a>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	07de      	lsls	r6, r3, #31
 8005106:	d508      	bpl.n	800511a <_printf_i+0x14a>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	6861      	ldr	r1, [r4, #4]
 800510c:	4299      	cmp	r1, r3
 800510e:	bfde      	ittt	le
 8005110:	2330      	movle	r3, #48	; 0x30
 8005112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800511a:	1b52      	subs	r2, r2, r5
 800511c:	6122      	str	r2, [r4, #16]
 800511e:	464b      	mov	r3, r9
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f8cd a000 	str.w	sl, [sp]
 8005128:	aa03      	add	r2, sp, #12
 800512a:	f7ff fedf 	bl	8004eec <_printf_common>
 800512e:	3001      	adds	r0, #1
 8005130:	d14a      	bne.n	80051c8 <_printf_i+0x1f8>
 8005132:	f04f 30ff 	mov.w	r0, #4294967295
 8005136:	b004      	add	sp, #16
 8005138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f043 0320 	orr.w	r3, r3, #32
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	2778      	movs	r7, #120	; 0x78
 8005146:	4832      	ldr	r0, [pc, #200]	; (8005210 <_printf_i+0x240>)
 8005148:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	061f      	lsls	r7, r3, #24
 8005152:	f851 6b04 	ldr.w	r6, [r1], #4
 8005156:	d402      	bmi.n	800515e <_printf_i+0x18e>
 8005158:	065f      	lsls	r7, r3, #25
 800515a:	bf48      	it	mi
 800515c:	b2b6      	uxthmi	r6, r6
 800515e:	07df      	lsls	r7, r3, #31
 8005160:	bf48      	it	mi
 8005162:	f043 0320 	orrmi.w	r3, r3, #32
 8005166:	6029      	str	r1, [r5, #0]
 8005168:	bf48      	it	mi
 800516a:	6023      	strmi	r3, [r4, #0]
 800516c:	b91e      	cbnz	r6, 8005176 <_printf_i+0x1a6>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	f023 0320 	bic.w	r3, r3, #32
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	2310      	movs	r3, #16
 8005178:	e7a6      	b.n	80050c8 <_printf_i+0xf8>
 800517a:	4824      	ldr	r0, [pc, #144]	; (800520c <_printf_i+0x23c>)
 800517c:	e7e4      	b.n	8005148 <_printf_i+0x178>
 800517e:	4615      	mov	r5, r2
 8005180:	e7bd      	b.n	80050fe <_printf_i+0x12e>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	6826      	ldr	r6, [r4, #0]
 8005186:	1d18      	adds	r0, r3, #4
 8005188:	6961      	ldr	r1, [r4, #20]
 800518a:	6028      	str	r0, [r5, #0]
 800518c:	0635      	lsls	r5, r6, #24
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	d501      	bpl.n	8005196 <_printf_i+0x1c6>
 8005192:	6019      	str	r1, [r3, #0]
 8005194:	e002      	b.n	800519c <_printf_i+0x1cc>
 8005196:	0670      	lsls	r0, r6, #25
 8005198:	d5fb      	bpl.n	8005192 <_printf_i+0x1c2>
 800519a:	8019      	strh	r1, [r3, #0]
 800519c:	2300      	movs	r3, #0
 800519e:	4615      	mov	r5, r2
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	e7bc      	b.n	800511e <_printf_i+0x14e>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	2100      	movs	r1, #0
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f859 	bl	8005268 <memchr>
 80051b6:	b108      	cbz	r0, 80051bc <_printf_i+0x1ec>
 80051b8:	1b40      	subs	r0, r0, r5
 80051ba:	6060      	str	r0, [r4, #4]
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	6123      	str	r3, [r4, #16]
 80051c0:	2300      	movs	r3, #0
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c6:	e7aa      	b.n	800511e <_printf_i+0x14e>
 80051c8:	462a      	mov	r2, r5
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	47d0      	blx	sl
 80051d2:	3001      	adds	r0, #1
 80051d4:	d0ad      	beq.n	8005132 <_printf_i+0x162>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	079b      	lsls	r3, r3, #30
 80051da:	d413      	bmi.n	8005204 <_printf_i+0x234>
 80051dc:	68e0      	ldr	r0, [r4, #12]
 80051de:	9b03      	ldr	r3, [sp, #12]
 80051e0:	4298      	cmp	r0, r3
 80051e2:	bfb8      	it	lt
 80051e4:	4618      	movlt	r0, r3
 80051e6:	e7a6      	b.n	8005136 <_printf_i+0x166>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4632      	mov	r2, r6
 80051ec:	4649      	mov	r1, r9
 80051ee:	4640      	mov	r0, r8
 80051f0:	47d0      	blx	sl
 80051f2:	3001      	adds	r0, #1
 80051f4:	d09d      	beq.n	8005132 <_printf_i+0x162>
 80051f6:	3501      	adds	r5, #1
 80051f8:	68e3      	ldr	r3, [r4, #12]
 80051fa:	9903      	ldr	r1, [sp, #12]
 80051fc:	1a5b      	subs	r3, r3, r1
 80051fe:	42ab      	cmp	r3, r5
 8005200:	dcf2      	bgt.n	80051e8 <_printf_i+0x218>
 8005202:	e7eb      	b.n	80051dc <_printf_i+0x20c>
 8005204:	2500      	movs	r5, #0
 8005206:	f104 0619 	add.w	r6, r4, #25
 800520a:	e7f5      	b.n	80051f8 <_printf_i+0x228>
 800520c:	080060db 	.word	0x080060db
 8005210:	080060ec 	.word	0x080060ec

08005214 <memmove>:
 8005214:	4288      	cmp	r0, r1
 8005216:	b510      	push	{r4, lr}
 8005218:	eb01 0402 	add.w	r4, r1, r2
 800521c:	d902      	bls.n	8005224 <memmove+0x10>
 800521e:	4284      	cmp	r4, r0
 8005220:	4623      	mov	r3, r4
 8005222:	d807      	bhi.n	8005234 <memmove+0x20>
 8005224:	1e43      	subs	r3, r0, #1
 8005226:	42a1      	cmp	r1, r4
 8005228:	d008      	beq.n	800523c <memmove+0x28>
 800522a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005232:	e7f8      	b.n	8005226 <memmove+0x12>
 8005234:	4601      	mov	r1, r0
 8005236:	4402      	add	r2, r0
 8005238:	428a      	cmp	r2, r1
 800523a:	d100      	bne.n	800523e <memmove+0x2a>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005246:	e7f7      	b.n	8005238 <memmove+0x24>

08005248 <_sbrk_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	2300      	movs	r3, #0
 800524c:	4d05      	ldr	r5, [pc, #20]	; (8005264 <_sbrk_r+0x1c>)
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fc fcac 	bl	8001bb0 <_sbrk>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_sbrk_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_sbrk_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000858 	.word	0x20000858

08005268 <memchr>:
 8005268:	4603      	mov	r3, r0
 800526a:	b510      	push	{r4, lr}
 800526c:	b2c9      	uxtb	r1, r1
 800526e:	4402      	add	r2, r0
 8005270:	4293      	cmp	r3, r2
 8005272:	4618      	mov	r0, r3
 8005274:	d101      	bne.n	800527a <memchr+0x12>
 8005276:	2000      	movs	r0, #0
 8005278:	e003      	b.n	8005282 <memchr+0x1a>
 800527a:	7804      	ldrb	r4, [r0, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	428c      	cmp	r4, r1
 8005280:	d1f6      	bne.n	8005270 <memchr+0x8>
 8005282:	bd10      	pop	{r4, pc}

08005284 <_realloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	4680      	mov	r8, r0
 800528a:	4614      	mov	r4, r2
 800528c:	460e      	mov	r6, r1
 800528e:	b921      	cbnz	r1, 800529a <_realloc_r+0x16>
 8005290:	4611      	mov	r1, r2
 8005292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	f7ff bc45 	b.w	8004b24 <_malloc_r>
 800529a:	b92a      	cbnz	r2, 80052a8 <_realloc_r+0x24>
 800529c:	f7ff fbda 	bl	8004a54 <_free_r>
 80052a0:	4625      	mov	r5, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	f000 f81b 	bl	80052e2 <_malloc_usable_size_r>
 80052ac:	4284      	cmp	r4, r0
 80052ae:	4607      	mov	r7, r0
 80052b0:	d802      	bhi.n	80052b8 <_realloc_r+0x34>
 80052b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052b6:	d812      	bhi.n	80052de <_realloc_r+0x5a>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4640      	mov	r0, r8
 80052bc:	f7ff fc32 	bl	8004b24 <_malloc_r>
 80052c0:	4605      	mov	r5, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0ed      	beq.n	80052a2 <_realloc_r+0x1e>
 80052c6:	42bc      	cmp	r4, r7
 80052c8:	4622      	mov	r2, r4
 80052ca:	4631      	mov	r1, r6
 80052cc:	bf28      	it	cs
 80052ce:	463a      	movcs	r2, r7
 80052d0:	f7ff fbb2 	bl	8004a38 <memcpy>
 80052d4:	4631      	mov	r1, r6
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff fbbc 	bl	8004a54 <_free_r>
 80052dc:	e7e1      	b.n	80052a2 <_realloc_r+0x1e>
 80052de:	4635      	mov	r5, r6
 80052e0:	e7df      	b.n	80052a2 <_realloc_r+0x1e>

080052e2 <_malloc_usable_size_r>:
 80052e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e6:	1f18      	subs	r0, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbc      	itt	lt
 80052ec:	580b      	ldrlt	r3, [r1, r0]
 80052ee:	18c0      	addlt	r0, r0, r3
 80052f0:	4770      	bx	lr
	...

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
